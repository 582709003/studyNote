1、事务的四大特性分别是：原子性、一致性、隔离性、持久性
     四种隔离级别：
     第一种隔离级别：Read uncommitted(支持读到未提交的数据)
     如果一个事务已经开始写数据，则另外一个事务不允许同时进行写操作，但允许其他事务读此行数据，该隔离级别可以通过“排他写锁”，但是不排斥读线程实现。这样就避免了更新丢失，却可能出现脏读，也就是说事务B读取到了事务A在事务中操作但未提交的数据，但是这时由于事务A可能出现了异常回滚了数据，所以 读取到的数据就是不存在的，就是脏读。（解决了更新丢失，但还是可能会出现脏读）。


    第二种隔离级别：Read committed(只支持读到已经提交的事务)
    如果是一个读事务(线程)，则允许其他事务读写，如果是写事务将会禁止其他事务访问该行数据，该隔离级别避免了脏读，但是可能出现不可重复读。事务A事先读取了数据，事务B紧接着更新了数据，并提交了事务，而事务A再次读取该数据时，数据已经发生了改变。（解决了更新丢失和脏读问题）。



2、事务回滚：
     如果Service层会抛出不属于运行时异常也要能回滚，那么可以将Spring默认的回滚时的异常修改为Exception，这样就可以保证碰到什么异常都可以回滚。具体的设置方式也说下：
                        ① 声明式事务，在配置里面添加一个rollback-for，代码如下
 <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/> 
                        ② 注解事务，直接在注解上面指定，代码如下
 
                     @Transactional(rollbackFor=Exception.class) 
                   只有非只读事务才能回滚的，只读事务是不会回滚的


   