现代密码学
    1、散列函数
        也称哈希函数，数字摘要算法，可以将任意长度的消息经过运算，变成固定长度数值，
        常见的加密方式：MD5,SHA-1,SHA-256,SHA-512，多应用在文件校验，数字签名中
        MD5可以将任意长度的原文生成一个128位(16字节)的哈希值
        SHA-1可以将任意长度的原文生成一个160位(20字节)的哈希值；

        消息摘要又称为数字摘要
            它是一个唯一对应一个消息或文本的固定长度的值，它由一个单向hash加密函数对消息进行作用而产生
            使用数字摘要而产生的值是不可篡改的，为了保证文件或者值 的安全，主要是为了防止文件或值被篡改
        特点
            无论输入的消息有多长，计算出来的消息摘要的长度总是固定的，例如md5算法摘要的消息由128个比特位，
            用sha-1摘要的消息最终会有160个比特位

            只要输入的消息不同，对其进行摘要后的消息也必不相同，但相同的输入必会产生相同的输出；
            消息摘要是单向的，不可逆的

        示例
             //算法
                    String algorithm2 = "MD5";
                    //原文
                    String input = "aa";
                    //创建消息摘要对象
                    MessageDigest messageDigest = MessageDigest.getInstance(algorithm2);

                    byte[] digest = messageDigest.digest(input.getBytes());

                    System.out.println(new String(Base64.encodeBase64(digest)));

        SHA-1,SHA-256,SHA-512的加密算法使用方式和md5一致

    2、对称加密
        使用的加密方式和解密方式使用的是同一把密钥
        对称密码分为：序列密码(流密码)，分组密码(块密码)两种。
        流密码：是对信息流中的每一个元素(一个字母或一个比特)作为基本的处理单元进行加密，块密码是先对信息流分块，
                再对每一块分别进行加密

        例如原文为1234567890，流加密就先对1进行加密，再对2进行加密。。。。。最后拼成密文；
        块加密先分成不同的块，如1234成块，5678成块，90XX(xx为补位数字)成块，再对不同块进行加密，最好拼接成密文。

        示例：
            我们现在有一个原文3要发给b，设置密钥为108，3*108=324，将324发给b；b拿到密文324后，使用324/108=3，得到原文

        常见加密算法
            DES：即数据加密标准，是一种使用密钥加密的块算法
            AES:高级加密标准，是一种区块加密标准，是用来替代原先的DES；
        特点
            1、加密速度快，可以加密大文件
            2、密文可逆，一旦密钥文件泄漏，就会导致数据暴露
            3、加密后的密文如果在编码表(ascil表)找不到对应字符，出现乱码
            4、一般结合base64使用
        注意：使用des加密的话，那么密钥key必须是8个字节
        des加密
            public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {
                    //原文
                    String a = "硅谷";
                    //定义key
                    String key = "12345678";
                    //算法
                    String trnsformation = "DES";
                    //加密类型
                    String algorithm = "DES";
                    Cipher des = Cipher.getInstance(trnsformation);
                    //创建加密规则
                    //第一个参数：表示key的字节
                    //第二个参数：加密的类型
                    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(),algorithm);
                    //进行加密初始化
                    //第一个参数：模式，加密，解密
                    //第二个参数：加密规则

                    des.init(Cipher.ENCRYPT_MODE,secretKeySpec);
                    //调用加密方法
                    //原文的字节数组
                    byte[] bytes = des.doFinal(a.getBytes());

                    //创建base64
                    byte[] encode = Base64.encodeBase64(bytes);
                    System.out.println("密文：" + new String(encode));


                    des = Cipher.getInstance(trnsformation);
                    //创建解密规则
                    //第一个参数：表示key的字节
                    //第二个参数：加密的类型
                    secretKeySpec = new SecretKeySpec(key.getBytes(),algorithm);
                    //进行加密初始化
                    //第一个参数：模式，加密，解密
                    //第二个参数：加密规则

                    des.init(Cipher.DECRYPT_MODE,secretKeySpec);
                    //调用加密方法
                    byte[] bytes1 = des.doFinal(Base64.decodeBase64(encode));
                    System.out.println("原文：" + new String(bytes1));
                }

            base64
                他不是加密算法，而是可读性算法，目的不是保护数据，而是为了可读性
                他是由64个字符组成，大写A-Z，小写a-z,数字0-9，两个符号 +和/
            base64原理
                3个字节为一组，一个字节8位，一共就是24位，然后把3个字节转换成4组，每组6位
                一个字节是8位，缺2位，在高位进行补0.这样做的好处，base64取后面的6位，前面的2位会把它去掉，
                可以把base64控制在0-63之间从0开始到63一共64个字符，所以就是base64
                然后对比码表获得数据，码表就是由64个字符组成，大写A-Z，小写a-z,数字0-9，两个符号 +和/

                base64补等号规则说明
                    在base64里面，必须是3个字节为一组，如果在输出的时候，不够3个字节，就需要使用=补齐


            base58一般用于比特币里面的一种编码方式

        AES加密
            代码是一样的,但是key密钥必须是16个字节的

        加密模式
            ECB：电子密码本，将需要加密的消息按照块密码的块大小被分为数个块，并对每个块进行独立加密 (默认值)
                优点：可以并行处理数据
                缺点：同样的原文使用同样的key生成同样的密文，不能很好的密
                同时加密，原文是一样的，加密出来的密文也是一样的

            CBC
                DES CBC（密文分组链接方式）有点麻烦，它的实现机制使加密的各段数据之间有了联系。其实现的机理如下：
                加密步骤如下：
                1）首先将数据按照8个字节一组进行分组得到D1D2......Dn（若数据不是8的整数倍，用指定的PADDING数据补位）
                2）第一组数据D1与初始化向量I异或后的结果进行DES加密得到第一组密文C1（初始化向量I为全零）
                3）第二组数据D2与第一组的加密结果C1异或以后的结果进行DES加密，得到第二组密文C2
                4）之后的数据以此类推，得到Cn
                5）按顺序连为C1C2C3......Cn即为加密结果。

                解密是加密的逆过程，步骤如下：
                1）首先将数据按照8个字节一组进行分组得到C1C2C3......Cn
                2）将第一组数据进行解密后与初始化向量I进行异或得到第一组明文D1（注意：一定是先解密再异或）
                3）将第二组数据C2进行解密后与第一组密文数据进行异或得到第二组数据D2
                4）之后依此类推，得到Dn
                5）按顺序连为D1D2D3......Dn即为解密结果。
                这里注意一点，解密的结果并不一定是我们原来的加密数据，可能还含有你补得位，一定要把补位去掉才是你的原来的数据。

                特点：
                1. 不容易主动攻击,安全性好于ECB,适合传输长度长的报文,是SSL、IPSec的标准。
                each ciphertext block depends on all message blocks/每个密文块依赖于所有的信息块
                thus a change in the message affects all ciphertext blocks/明文消息中一个改变会影响所有密文块
                2. need Initial Vector (IV) known to sender & receiver/发送方和接收方都需要知道初始化向量
                3.加密过程是串行的，无法被并行化(在解密时，从两个邻接的密文块中即可得到一个平文块。因此，解密过程可以被并行化)。

        填充模式
            noPadding
                不填充
                在des加密算法下，要求原文长度必须是8个byte的整数倍
                在aes加密算法下，要求原文长度必须是16个byte的整数倍

            pkcs5Padding(默认值)
                数据块的大小为8位，不够就补足

    3、非对称加密(现代加密算法)
        有两把密钥，使用公钥加密，必须使用私钥解密；或者私钥加密(此时一般称为签名)，公钥解密(此时一般称为验签)；
        公钥是可以公开的，大家使用公钥进行加密后，再发送给私钥的持有者，私钥持有者使用私钥对信息进行解密，获得信息原文。
        因为私钥只有单一人持有，因此不用担心被他人解密获取信息原文。
        公钥和私钥是一对，我们称为密钥对

        常见非对称加密算法
            RSA
                示例
                      //算法
                    String algorithm3 = "RSA";
                    //创建密钥对生成器
                    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(algorithm3);
                    //生成密钥对
                    KeyPair keyPair = keyPairGenerator.generateKeyPair();
                    //生成公私钥
                    PrivateKey aPrivate = keyPair.getPrivate();
                    PublicKey aPublic = keyPair.getPublic();
                    //获取私钥的字节数组
                    byte[] privateEncoded = aPrivate.getEncoded();
                    //获取公钥的字节数组
                    byte[] publicEncoded = aPublic.getEncoded();

                    String privateEncodeds = new String(Base64.encodeBase64(privateEncoded));
                    String publicEncodeds = new String(Base64.encodeBase64(publicEncoded));

                    System.out.println(privateEncodeds);
                    System.out.println(publicEncodeds);


                  //加密
                    //原文
                    String input2 = "硅谷";
                    Cipher des2 = Cipher.getInstance(algorithm3);
                    //进行加密初始化
                    //第一个参数：模式，加密，解密
                    //第二个参数：使用公钥还是私钥加密
                    des2.init(Cipher.ENCRYPT_MODE,aPrivate);
                    //调用加密方法
                    //原文的字节数组
                    byte[] bytes2 = des2.doFinal(input2.getBytes());

                  //解密
                    des2.init(Cipher.DECRYPT_MODE,aPublic);
                    byte[] bytes3 = des2.doFinal(bytes2);

                    System.out.println("原文2：" + new String(bytes3));
            ECC

        保存公钥和私钥

        读取私钥

    数字签名
        数字签名是基于公钥密码体制（非对称密钥密码体制）的。
        公钥数字签名，只有信息的发送者，才能产生别人无法伪造的一段数字串，类似于写在纸上的普通物理签名；
        数字签名是非对称密钥加密技术与数字摘要技术的应用。
        大致过程
            首先，文件经过单向散列函数的处理得到一份占128位的摘要（无论文件多大，经过单向散列函数的处理，生成的摘要都是128位），
            这份摘要相当于该文件的"指纹"，能够唯一地识别文件。注意：只要文件发生改动，经过单向散列函数处理后得到地摘要都会不一样。
            所以，文件和文件的摘要具有很强的对应关系。
            随后，用户A使用自己地私钥对这份128位地摘要进行加密，得到一份加密地摘要。
            然后，用户A把文件、加密的摘要和公钥打包一起发给用户B。传输的过程中并没有对文件进行加密处理。
            用户B将收到的文件经过单向散列函数处理得出一份128位摘要，这份摘要是通过收到的文件得到的，存在被更改的可能；
            使用A提供的公钥对收到的"加密的摘要"进行解密得到另一份128位摘要，这份摘要是通过原始文件得到的，一般认为代表真正的文件；
            然后将两份摘要进行比较。
            如果两份摘要相等，说明文件经过用户A签名之后，在传输的过程中没有被更改；若不相等，说明文件在传输过程中被更改了，
            或者说已经不是原来的文件了，此时用户A的签名失效。

        数字签名三个特征的验证
            不可否认——只有用户A拥有私钥A，并能使用私钥A产生"加密的摘要"，这样用户A就不能否认给用户B发送了经过签名的密文。
            报文的完整性——用户B通过比较得出的两份摘要是否相等，可以判断签名或文件内容是否发生改变。
            报文鉴别——用户B可以使用收到的公钥对"加密的摘要"进行解密，从而核实用户A对文件的签名。
        需要强调
            用户A使用私钥对由文件生成的128位摘要进行加密的过程称为数字签名的过程，得到的"加密的摘要"，称为该文件的数据签名。
            用户A使用私钥加密的是摘要而不是文件。
            用户B验证签名实际上是比较得出的两份摘要是否相等。

    证书颁发机构CA
        证书颁发和使用过程
            见图
            首先，用户A向证书颁发机构提交个人信息，申请证书。通过CA审核后，CA生成用户A的证书，证书中包括了A的公钥和私钥
            还有CA的数字签名。证书颁发机构CA本身拥有一对密钥，这是对CA所颁发的证书进行数字签名和保密的基础，绝不能泄露。

            ***用户A收到的证书中包括了带有CA数字签名的，专属A的公钥和私钥，CA的数字签名确保了别人不能伪造用户A的公钥和私钥。

            同时，用户B也必须信任给用户A颁发证书的第三方认证机构CA，即用户B拥有CA颁发的"CA公钥"。

            通信时，用户A向用户B发送的数据包中的"加密的摘要"上有用户A的数字签名，“A公钥” 上有认证机构CA的数字签名。
            用户B收到数据包之后，先要验证收到的 “A公钥” 是否来源合法：是认证机构颁发的带有CA签名的公钥吗？用户B并不信任
            用户A，但是用户B信任第三方认证机构CA。所以，用户B先使用证书颁发机构颁发的 "CA公钥" 验证收到的 "A公钥"
            是否由同一认证机构颁发，是否在颁发之后更改过。

            验证通过后，用户B便相信收到的 "A公钥" 确实来自真实的用户A。随后再使用 "A公钥" 对 "加密的摘要" 进行解密，
            进行上文提到的对比操作，以判断文件是否更改。
    2.4.证书的吊销
        当用户A遗失或泄露了CA颁发的证书后，为了避免他人使用该证书冒充用户A，用户A向认证机构CA "挂失" 该证书。于是认证机构
        CA把该证书放入该认证机构的证书吊销列表（CRL）中，并在网上公示。
        用户B在收到用户A的公钥时，除了要验证该公钥是否位认证机构颁发的，还要登录认证机构的网站查看该公钥是否已被认证机构吊
        销变为无效证书。
    2.5.总结
        认证机构CA的作用：
            为企业和用户颁发数字证书，确保这些企业和个人的身份是真实的；
            发布证书吊销列表，供用户查询收到的证书是否已被机构吊销而无效；

Byte和bit
    byte：字节，数据存储的基本单位，一个字节存储8位无符号数，储存的数值范围为0-255，比如移动硬盘1T，单位byte
            一个中文字符可以有多个字节组成，可以看编码那边的知识
    bit：bite，又叫位，一个位要么是0，要么是1，数据传输的单位，比如家里的宽带100mb，下载速度并没有达到100mb，一般是
    12-13mb，那么是因为需要使用100/8


        //获得签名
        Signature signature = Signature.getInstance("sha256withrsa");
        signature.initSign(aPrivate);
        signature.update(input.getBytes());
        byte[] sign = signature.sign();


        //检验签名
        signature.initVerify(aPublic);
        signature.update(input.getBytes());
        System.out.println(signature.verify(sign));


https协议原理
    见：https://blog.csdn.net/guolin_blog/article/details/104546558?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162047148816780265423361%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162047148816780265423361&biz_id=0&utm_medium=distribute.wap_search_result.none-task-blog-2~all~top_positive~default-1-104546558.wap_first_rank_v2_rank_v29&utm_term=https&spm=1018.2118.3001.4187

    使用http传输数据至少存在着数据被监听以及数据被篡改这两大风险，因此http是一种不安全的传输协议，
    数据以明文的形式在网络上传输是不安全的，那么我们显然要对数据进行加密才行。刚才提到了，加密方式主要有两种，
    对称加密和非对称加密。对称加密的优点是加解密效率高，而我们在网络上传输数据是非常讲究效率的，因此这里很明显应该使用对称加密

    这种工作机制看上去好像确实保证了数据传输的安全性，但是却存在一个巨大的漏洞：浏览器和网站怎样商定使用什么密钥呢？
    如果我们想要安全地创建一个对称加密的密钥，可以让浏览器这边来随机生成，但是生成出来的密钥不能直接在网络上传输，而是要用网站
    提供的公钥对其进行非对称加密。由于公钥加密后的数据只能使用私钥来解密，因此这段数据在网络上传输是绝对安全的。而网站在收到
    消息之后，只需要使用私钥对其解密，就获取到浏览器生成的密钥了。

    另外，使用这种方式，只有在浏览器和网站首次商定密钥的时候需要使用非对称加密，一旦网站收到了浏览器随机生成的密钥之后，
    双方就可以都使用对称加密来进行通信了，因此工作效率是非常高的。

    那么，上述的工作机制你认为已经非常完善了吗？其实并没有，因为我们还是差了非常关键的一步，浏览器该怎样才能获取到网站的公钥呢？
    虽然公钥是属于公开的数据，在网络上传输不怕被别人监听，但是如果公钥被别人篡改了怎么办？
    也就是说，只要我们从网络上去获取任何网站的公钥，就必然存在着公钥被篡改的风险。而一旦你使用了假的公钥来对数据进行加密，
    那么就可以被别人以假的私钥进行解密，后果不堪设想。

    这个时候，就必须引入一个新的概念来打破僵局了：CA机构。

    那么CA机构是如何完成这个艰巨的任务的呢？下面开始一步步解析。

    首先，我们作为一个网站的管理员需要向CA机构进行申请，将自己的公钥提交给CA机构。CA机构则会使用我们提交的公钥，再加上一系列其他的信息，如网站域名、有效时长等，来制作证书。

    证书制作完成后，CA机构会使用自己的私钥对其加密，并将加密后的数据返回给我们，我们只需要将获得的加密数据配置到网站服务器上即可。

    然后，每当有浏览器请求我们的网站时，首先会将这段加密数据返回给浏览器，此时浏览器会用CA机构的公钥来对这段数据解密。

    如果能解密成功，就可以得到CA机构给我们网站颁发的证书了，其中当然也包括了我们网站的公钥。你可以在浏览器的地址栏上，点
    击网址左侧的小锁图标来查看证书的详细信息，
    得到了公钥之后，接下来的流程就和刚才示意图中所描述的一样了。

    而如果无法解密成功，则说明此段加密数据并不是由一个合法的CA机构使用私钥加密而来的，有可能是被篡改了，于是会在浏览器上显示
    一个著名的异常界面，如下图所示。

    们在浏览器端要使用CA机构的公钥来解密数据，那么又该如何安全地获取到CA机构的公钥呢？

    这个问题就很好解决了，因为世界上的网站是无限多的，而CA机构总共就那么几家。任何正版操作系统都会将所有主流CA机构的公
    钥内置到操作系统当中，所以我们不用额外获取，解密时只需遍历系统中所有内置的CA机构的公钥，只要有任何一个公钥能够正常解密出
    数据，就说明它是合法的。

    但是即使使用CA机构的公钥能够正常解密出数据，目前的流程也还是存在问题的。因为每一家CA机构都会给成千上万的网站制作证书，
    假如攻击者知道abc.com使用的是某家CA机构的证书，那么他也可以同样去这家CA机构申请一个合法的证书，然后在浏览器请求abc.com
    时对返回的加密证书数据进行替换。

    可以看到，由于攻击者申请的证书也是由正规CA机构制作的，因此这段加密数据当然可以成功被解密。

    也正是因为这个原因，所有CA机构在制作的证书时除了网站的公钥外，还要包含许多其他数据，用来辅助进行校验，比如说网站的域名就
    是其中一项重要的数据。

    同样是刚才的例子，如果证书中加入了网站的域名，那么攻击者就只能无功而返了。因为，即使加密数据可以被成功解密，但是最终
    解密出来的证书中包含的域名和浏览器正在请求的域名对不上，那么此时浏览器仍然会显示异常界面。

    那么回到一开始的问题：https使用的是对称加密还是非对称加密呢？答案也很明显了，https使用的是对称加密与非对称加密相结合的方式。

















