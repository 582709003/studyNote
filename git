分布式版本控制系统在管理项目时存放的不是版本与版本之间的差异，它存的是索引



git gui here：是git的图形化界面

git bash here:打开一个linux的命令窗口，在这个命令窗口里可以敲打linux的命令

注意git只是一个版本控制工具，它和github以及gitee是不一样的东西，github和gitee是远程仓库，git是中间控制工具，所以
git其实配置时不需要密码，只需要配置name以及邮箱，这个其实就是为了给你的git起个名字，没什么作用；
当你要连接远程仓库时，必然要输入远程仓库的账号密码，也就是你在github或者gitee上的账号密码，这样你才能提交，或者更新等，
当你输入账号密码后在，这个信息会保存到凭证管理器里面，我的理解是，由于git会频繁的和远程仓库进行交互，但是如果每次交互都要
输入账号密码就会很麻烦，所以git开发在设计时就将登录信息保存到了凭证管理器里；
但是当我们使用git去连接其他远程仓库时，譬如由原来的github转到了gitee上，此时凭证管理器里的git保留的登录信息还是以前的github的，这时
就会报错，在git上使用命令是无法修改凭证管理器里的git信息的，所以只能手动去凭证管理器修改账号密码或者删除，删除之后你再去连接远程仓库
时，就会弹出一个输入账号密码的弹框，这时你输入后就会又在凭证管理器保存git连接远程仓库的连接信息，只要在凭证管理器里由git的连接信息，
git连接远程仓库时就会一直沿用那个信息；
在idea上配置git或者gitee的登陆信息是为了idea能够使git获取登陆信息而不用弹出连接远程仓库登陆信息的弹框，你也可以不配置而在弹出
框输入信息


git仓库分本地仓库和远程仓库
一个项目或一个工程为工作区，工作区隐藏一个.git目录，这个目录不属于工作区，而是git的版本库，是git管理所有内容的地方
    本地仓库：分为工作区和版本库，而版本库又分为暂存区和分支


    本地结构：
        工作区：就是你写代码的地方
        git add 到暂存区
        暂存区：临时存储区，打算要提交但是还未提交的
        git commit到本地库
        本地库：真正的每个历史版本的信息

        一般情况下如果开发者在本地维护版本的时候，只要将工作区推送到暂存区，暂存区再推到分支，这就完成了一次闭环（如果没有远程仓库的情况下）
        本地分支上传到远程分支

    本地库和远程库的交互方式
        见图

    托管中心分类
        局域网环境下：可以搭建gitlab服务器作为代码托管中心，gitlab可以自己去搭建
        外网环境下：可以有github或者gitee作为代码托管中心，不用自己去搭建

    初始化本地仓库
        1、在本地创建文件夹
        2、git bash here进入git终端，进入后可以右击options，命令和linux一样的
        3、往本地库上传文件的时候得要让其他人知道是谁上传的，所以需要设置签名(用户名+邮箱)
            git config --global user.name ....
            git config --global user.email ....
        4、本地仓库的初始化
            在创建的文件夹下 git init 生成一个.git目录，git是版本库，是git管理所有内容的地方，版本库又分为暂存区和分支
            .git目录不要随意修改
常见命令
    add和commit命令
        git add 文件 工作区提交到暂存区
        git commit -m "...." 暂存区提交到本地版本库
        不放在本地仓库所在文件下的文件，git不进行管理，即使放在本地仓库所处文件夹下的文件git也不一定进行管理，必须通过
        add、commit命令操作才可以将内容提交到本地库

    status命令
        git status
    log命令
        可以让我们查看提交的，显示从最近到最远的日志

        日志展示方式
        1、git log
            当查看出来的命令比较多的时候一页展示不下，可以按空格展示下页，上一页按b，到尾页了会显示end，退出：q
        2、git log --pretty=oneline 一行展示
        3、git log --oneline
        4、git reflog  多了head@{数字}
            这个数字含义：指针回到当前这个历史版本需要走多少步
    reset命令
        可以切换不同版本，前进或者后退历史版本都可以
        git reset --hard commitId
       撤销操作：
       git reset --soft HEAD^
       这样就成功撤销了commit，如果想要连着add也撤销的话，--soft改为--hard（删除工作空间的改动代码）。
       命令详解：
       HEAD^ 表示上一个版本，即上一次的commit，也可以写成HEAD~1
       如果进行两次的commit，想要都撤回，可以使用HEAD~2
       --soft
       不删除工作空间的改动代码 ，撤销commit，不撤销git add file
       --mixed
       意思是：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作
       这个为默认参数,git reset --mixed HEAD^ 和 git reset HEAD^ 效果是一样的
       --hard
       删除工作空间的改动代码，撤销commit且撤销add

        git checkout -- <file> 是一个危险的命令。 你对那个文件在本地的任何修改都会消失——Git 会用最近提交的版本覆盖掉它。
         除非你确实清楚不想要对那个文件的本地修改了，否则请不要使用这个命令

       另外一点，如果commit注释写错了，先要改一下注释，有其他方法也能实现，如：
       git commit --amend
       这时候会进入vim编辑器，修改完成你要的注释后保存即可。

    删除文件/找回本地库删除的文件
        在工作区将文件删除后进行提交并commit，其实文件并不是物理删除，之后如果想把删除的文件找回
        git reset --hard 历史版本
        实际上就是将历史版本切换到刚才添加文件的哪个版本即可

    找回暂存区删除的文件
        工作区删除了本地文件后并add之后如何恢复暂存区中的数据
         git reset --hard 历史版本
         实际上就是将历史版本切换到有那个文件的哪个版本即可

    diff命令
        git diff 文件  将工作区和暂存区中的文件进行比较
        多个文件的比较直接使用git diff

        git diff head 文件名  将暂存区和版本库里的现在指针指着的文件进行比较
        git diff 历史版本 文件名

分支
    在版本控制过程中，使用多条线同时推进多个任务。这里面说的多条线就是分支
    分支的展示
        见图
    分支的好处
        同时多个分支可以并行开发，互相不耽误，互相不影响，提高开发效率
        如果功能开发失败，只要删除此分支，不会影响主分支
    查看分支
         git branch -v
    创建分支
        git branch 新分支名
        git 创建新分支时，会复制当前分支的所有内容以及当前分支之前的提交记录版本，切换分支时会实时显示当前分支的修改内容
        git log --oneline  查看当前分支的提交记录
    切换分支
        git checkout 分支名
        git checkout origin(远程主机别名)/<remotebranch>
    删除分支
        git branch -d (branchname)
    分支合并
        将a分支合并到主分支的话，那就先进入主分支，然后执行
        git merge a 进行合并
        如果命令窗口显示(master|merging)代表处于合并状态中

    合并冲突
        不同分支对同一个文件同一个位置进行修改会导致冲突
        具体见图
    解决冲突
        人为决定，留下想要的，然后add并commit即可，commit之后命令窗口的显示(master)

本地库和远程库的交互
    1、创建一个本地库
    2、创建一个远程库
    3、在本地为远程库地址创建别名
        查看别名：git remote -v
        在本地为远程库地址创建别名：git remote add origin(自定义远程名) 具体远程仓库地址
    4、推送操作
            git push origin(远程库的别名) master(你要推送的分支，选择一个分支即可)
        命令格式如下：
            git push <远程主机名> <本地分支名>:<远程分支名>
        如果本地分支名与远程分支名相同，则可以省略冒号：
            git push <远程主机名> <本地分支名>
    5、克隆操作
        git clone 具体的远程仓库地址
        克隆操作可以完成三件事
        1、初始化本地库
        2、将远程库内容完整的克隆到本地，创建一个指向它的 master 分支的指针，并且在本地将其命名为 origin/master。
            同时Git 也会给你一个与 origin 的master 分支在指向同一个地方的本地 master 分支
        3、替我们创建远程库的别名为 origin
    6、远程库修改的拉取
        pull操作=fetch+merge
        git fetch <远程主机名> <远程分支名>：将远程库库特定分支的版本内容更新到本地版本库，但是不更新到工作区
        查看远程分支的内容是否正确 git checkout origin(远程主机别名)/<remotebranch>
        进行合并
        git merge origin(远程主机别名)/<remotebranch>

        或者我们直接通过pull操作
        git pull <远程主机名> <远程分支名>:<本地分支名>

    7、协同开发合作时冲突的解决方法
        在冲突的情况下先拉取下来，然后解决冲突，然后再提交


a、b团队进行合作，fork操作
    1、b团队在github登录之后，进入远程仓库地址中，然后点击下面的fork按钮，然后看可以看到账号下面显示forked
       from 。。。。。说明fork成功
    2、b团队的开发人员在本地某个文件夹直接git bash here ，然后clone就能复制下来，修改文件并add，commit，push之后，
        想要将修改合并到a团队
    3、进行pull request操作
        b团队的github上选择pull request，然后点击new pull request--create pull request
    4、pull request提交之后，a团队进入github，进入pull request，查看收到的请求进行审核
        点击files changed 查看具体提交的内容
    5、如果a团队确认没有问题就点击 merge pull request，然后就合并了

分支合并：快速合并和三方合并
        三方合并：主分支的只针会形成一个新的版本，但是dev分支的只针不变，是不会将主分支的改变合并到dev分支的
        git log --oneline --graph  带有简易图形的日志

git整合idea
    1、在idea中的设置里找到git，将git.exe路径配置到path to git executeable
    2、在设置中找到gitHub，把github服务器网址，账户密码配置好

    配置git仓库的几种方式
        假如你是创建项目的，需要将项目与远程仓库关联
            方式一
                1、首先初始化项目的本地仓库，在vcs--import into version controll--create git respority
                2、同步到远程仓库，在vcs--import into version controll--share project on github
            方式二
                1、首先初始化项目的本地仓库，在vcs--import into version controll--create git respority
                2、创建远程仓库 git remotes .....
                3、git push将本地库推到远程库

        假如你是拉取项目的
            直接在idea上git clone

    创建分支
        a开发人员在工作区创建了本地分支dev，并提交到了远程仓库；那么b开发人员在idea上如何更新dev分支？
        b开发人员可以使用git feach来拉取远程仓库的最新状态

    本地分支冲突的解决
        冲突出现在合并分支的时候，选择merge，出现三个子窗口，最左边的是你本地的代码，中间的是合并结果，最右边的是他人的代码。
        根据需要选择是保留自己的修改还是他人的修改。选择自己的就Accept Left，选择他人的就Accept Right。或者选择左箭头右箭头。
        当然也可以全部选择保留。

    上传远程仓库出现冲突的解决
        也是同样的操作，选择merge，后面是一样的；
        或者先git pull，如果存在有冲突的文件，会提示冲突；这时候我一般选择stash changes，把自己修改的暂存起来，再更新代码；
            更新代码后，再unstash changes，选择刚才stash的代码恢复，文件报错，发现git pull强制的进行了合并，这时候你可以根据实际
            需要选择保留的代码。
            Updated upstream是更新的代码，Stashed changes是你暂存的修改。

            我们本地进行了一些代码编辑，使用git的stash Changes功能，查看本地代码变化，可以看到自己新加的方法没有了，
            又回到了从git上pull下来的最新状态；
            查看git的UnStash Changes功能，点击上图view，可以对比代码，点击 apply stash ，可以将stash的代码恢复到本地



忽略文件：在项目根目录下创建忽略文件
Git忽略规则(.gitignore配置）不生效原因和解决
第一种方法:
.gitignore中已经标明忽略的文件目录下的文件，git push的时候还会出现在push的目录中，或者用git status查看状态，想要忽略的文件
还是显示被追踪状态。
原因是因为在git忽略目录中，新建的文件在git中会有缓存，如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略
路径也是不起作用的，
这时候我们就应该先把本地缓存删除，然后再进行git的提交，这样就不会出现忽略的文件了。

解决方法: git清除本地缓存（改变成未track状态），然后再提交:
[root@kevin ~]# git rm -r --cached .
[root@kevin ~]# git add .
[root@kevin ~]# git commit -m 'update .gitignore'
[root@kevin ~]# git push -u origin master