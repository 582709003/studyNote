分布式版本控制系统在管理项目时存放的不是版本与版本之间的差异，它存的是索引



git gui here：是git的图形化界面

git bash here:打开一个linux的命令窗口，在这个命令窗口里可以敲打linux的命令

注意git只是一个版本控制工具，它和github以及gitee是不一样的东西，github和gitee是远程仓库，git是中间控制工具，所以
git其实配置时不需要密码，只需要配置name以及邮箱，这个其实就是为了给你的git起个名字，没什么作用；
当你要连接远程仓库时，必然要输入远程仓库的账号密码，也就是你在github或者gitee上的账号密码，这样你才能提交，或者更新等，
当你输入账号密码后在，这个信息会保存到凭证管理器里面，我的理解是，由于git会频繁的和远程仓库进行交互，但是如果每次交互都要
输入账号密码就会很麻烦，所以git开发在设计时就将登录信息保存到了凭证管理器里；
但是当我们使用git去连接其他远程仓库时，譬如由原来的github转到了gitee上，此时凭证管理器里的git保留的登录信息还是以前的github的，这时
就会报错，在git上使用命令是无法修改凭证管理器里的git信息的，所以只能手动去凭证管理器修改账号密码或者删除，删除之后你再去连接远程仓库
时，就会弹出一个输入账号密码的弹框，这时你输入后就会又在凭证管理器保存git连接远程仓库的连接信息，只要在凭证管理器里由git的连接信息，
git连接远程仓库时就会一直沿用那个信息；
在idea上配置git或者gitee的登陆信息是为了idea能够使git获取登陆信息而不用弹出连接远程仓库登陆信息的弹框，你也可以不配置而在弹出
框输入信息


git仓库分本地仓库和远程仓库
一个项目或一个工程为工作区，工作区隐藏一个.git目录，这个目录不属于工作区，而是git的版本库，是git管理所有内容的地方
    本地仓库：分为工作区和版本库，而版本库又分为暂存区和分支


    本地结构：
        工作区：就是你写代码的地方
        git add 到暂存区
        暂存区：临时存储区，打算要提交但是还未提交的
        git commit到本地库
        本地库：真正的每个历史版本的信息

        一般情况下如果开发者在本地维护版本的时候，只要将工作区推送到暂存区，暂存区再推到分支，这就完成了一次闭环（如果没有远程仓库的情况下）
        本地分支上传到远程分支

    本地库和远程库的交互方式
        见图
        将远程仓库关联到本地仓库分支命令：git remote add origin(自定义远程名) 具体远程仓库地址

    托管中心分类
        局域网环境下：可以搭建gitlab服务器作为代码托管中心，gitlab可以自己去搭建
        外网环境下：可以有github或者gitee作为代码托管中心，不用自己去搭建

    初始化本地仓库
        1、在本地创建文件夹
        2、git bash here进入git终端，进入后可以右击options，命令和linux一样的
        3、往本地库上传文件的时候得要让其他人知道是谁上传的，所以需要设置签名(用户名+邮箱)
            git config --global user.name ....
            git config --global user.email ....
        4、本地仓库的初始化
            在创建的文件夹下 git init 生成一个.git目录，git是版本库，是git管理所有内容的地方，版本库又分为暂存区和分支
            .git目录不要随意修改
常见命令
    add和commit命令
        git add 文件 工作区提交到暂存区
        git commit -m "...." 暂存区提交到本地版本库
        不放在本地仓库所在文件下的文件，git不进行管理，即使放在本地仓库所处文件夹下的文件git也不一定进行管理，必须通过
        add、commit命令操作才可以将内容提交到本地库

    status命令
        git status
    log命令
        可以让我们查看提交的，显示从最近到最远的日志

        日志展示方式
        1、git log
            当查看出来的命令比较多的时候一页展示不下，可以按空格展示下页，上一页按b，到尾页了会显示end，退出：q
        2、git log --pretty=oneline 一行展示
        3、git log --oneline
        4、git reflog  多了head@{数字}
            这个数字含义：指针回到当前这个历史版本需要走多少步
    reset命令
        可以切换不同版本，前进或者后退历史版本都可以
        git reset --hard commitId
       撤销操作：
       git reset --soft HEAD^
       这样就成功撤销了commit，如果想要连着add也撤销的话，--soft改为--hard（删除工作空间的改动代码）。
       命令详解：
       HEAD^ 表示上一个版本，即上一次的commit，也可以写成HEAD~1
       如果进行两次的commit，想要都撤回，可以使用HEAD~2
       --soft
       不删除工作空间的改动代码 ，撤销commit，不撤销git add file
       --mixed
       意思是：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作
       这个为默认参数,git reset --mixed HEAD^ 和 git reset HEAD^ 效果是一样的
       --hard
       删除工作空间的改动代码，撤销commit且撤销add

       另外一点，如果commit注释写错了，先要改一下注释，有其他方法也能实现，如：
       git commit --amend
       这时候会进入vim编辑器，修改完成你要的注释后保存即可。

    删除文件/找回本地库删除的文件
        在工作区将文件删除后进行提交并commit，其实文件并不是物理删除，之后如果想把删除的文件找回
        git reset --hard 历史版本
        实际上就是将历史版本切换到刚才添加文件的哪个版本即可

    找回暂存区删除的文件
        工作区删除了本地文件后并add之后如何恢复暂存区中的数据
         git reset --hard 历史版本
         实际上就是将历史版本切换到有那个文件的哪个版本即可

    diff命令
        git diff 文件  将工作区和暂存区中的文件进行比较
        多个文件的比较直接使用git diff

        git diff head 文件名  将暂存区和版本库里的现在指针指着的文件进行比较
        git diff 历史版本 文件名

分支
    在版本控制过程中，使用多条线同时推进多个任务。这里面说的多条线就是分支
    分支的展示
        见图
    分支的好处
        同时多个分支可以并行开发，互相不耽误，互相不影响，提高开发效率
        如果功能开发失败，只要删除此分支，不会影响主分支




git 创建新分支时，会复制当前分支的所有内容以及当前分支之前的提交记录版本，切换分支时会实时显示当前分支的修改内容
    git log --oneline  查看当前分支的提交记录

分支合并：快速合并和三方合并

        三方合并：主分支的只针会形成一个新的版本，但是dev分支的只针不变，是不会将主分支的改变合并到dev分支的

        git log --oneline --graph  带有简易图形的日志

合并冲突：同一个文件不同分支进行修改

忽略文件：在项目根目录下创建忽略文件



Git忽略规则(.gitignore配置）不生效原因和解决
第一种方法:
.gitignore中已经标明忽略的文件目录下的文件，git push的时候还会出现在push的目录中，或者用git status查看状态，想要忽略的文件
还是显示被追踪状态。
原因是因为在git忽略目录中，新建的文件在git中会有缓存，如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略
路径也是不起作用的，
这时候我们就应该先把本地缓存删除，然后再进行git的提交，这样就不会出现忽略的文件了。

解决方法: git清除本地缓存（改变成未track状态），然后再提交:
[root@kevin ~]# git rm -r --cached .
[root@kevin ~]# git add .
[root@kevin ~]# git commit -m 'update .gitignore'
[root@kevin ~]# git push -u origin master