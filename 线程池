什么是线程池
    可以以new Thread ().start();这种形式开启一个线程，当run方法运行结束后，线程对象
    会被GC回收；

    在真实的环境中，可能需要很多线程来支撑整个应用，当线程非常多时
    反而会耗尽CPU资源，如果不对线程进行控制和管理，反而会影响程序的性能；
    线程开销包括：
        创建与启动线程的开销，线程销毁的开销，线程调度的开销，线程数量受限于CPU处理器的数量


    线程池就是有效使用线程的一种常用方式，线程池内部可以预先创建一定数量的工作线程，客户端代码
    直接将任务作为一个对象提交给线程池，线程池直接将这些任务缓存在工作队列中，线程池的工作线程
    不断的从队列中取出任务并执行；

    java提供了一套Executor(接口)框架，可以帮助开发人员有效的使用线程池
    Executors 提供了一系列简便的方法，来帮助我们创建ThreadPool。
    ExecutorService继承了Executor，提供了更多的线程池的操作。是对Executor的补充；
    通过Executors创建Executor和ExecutorService
    Executors工具类中创建线程池的方法的底层都使用了ThreadPoolExecutor线程池；

    1、Executor是一个顶层接口，在它里面只声明了一个方法execute(Runnable)，返回值为void，参数为Runnable类型，
    从字面意思可以理解，就是用来执行传进去的任务的。然后ExecutorService接口继承了Executor接口，并声明了一些方法：submit、
    invokeAll、invokeAny以及shutDown等。
    抽象类AbstractExecutorService实现了ExecutorService接口，基本实现了ExecutorService中声明的所有方法。
    然后ThreadPoolExecutor继承了类AbstractExecutorService。
    在ThreadPoolExecutor类中有几个非常重要的方法：
    execute()
    submit()
    shutdown()
    shutdownNow()

     submit()方法是在ExecutorService中声明的方法，在AbstractExecutorService就已经有了具体的实现，在
     ThreadPoolExecutor中并没有对其进行重写，这个方法也是用来向线程池提交任务的，
     但是它和execute()方法不同，它能够返回任务执行的结果，去看submit()方法的实现，会发现它实际上还是调用的execute()方法，
     只不过它利用了Future来获取任务执行结果

    ThreadPoolExecutor构造方法
         public ThreadPoolExecutor(int corePoolSize,
                                      int maximumPoolSize,
                                      long keepAliveTime,
                                      TimeUnit unit,
                                      BlockingQueue<Runnable> workQueue,
                                      ThreadFactory threadFactory,
                                      RejectedExecutionHandler handler)

            corePoolSize：线程池中核心线程数量
            maximumPoolSize：线程池中最大的线程数量
            keepAliveTime：当线程池中线程数量超过corePoolSize时，多余的空闲线程存活的时长
            unit：keepAliveTime的单位
            workQueue：任务队列，把任务提交到该任务队列中等待执行
            threadFactory：线程工厂，用于创建线程
            handler：拒绝策略，当任务太多来不及处理时，如何拒绝

            说明：workQueue是指提交并未执行的工作队列

            拒绝策略
                当提交给线程池的任务量超过了实际承载能力时，如何处理？即线程池中的线程已经用完了，等待队列也满了，无法为
                新提交的任务服务，可以通过拒绝策略来处理

                RejectedExecutionHandler的四种拒绝策略

                    AbortPolicy：抛出异常

                    DiscardPolicy：直接丢弃这个无法处理的任务

                    DiscardOldestPolicy：将任务队列中最老的任务丢弃，尝试再次提交新任务

                    CallerRunsPolicy：只要线程池没关闭，会在调用者线程中运行当前被丢弃的任务

            ThreadFactory
                这是一个接口，只有一个方法
                Thread newThread(Runnable r);
                当线程池中需要创建线程时就会调用这个方法
                我们可以重写这个方法构造自己的线程工厂

            ThreadPoolExecutor提供了两个方法
            protected void beforeExecute(Thread t, Runnable r)：任务执行前执行
            protected void afterExecute(Runnable r, Throwable t)：任务执行结束后，成功执行或者异常退出都会执行
            我们可以重写这个两个方法


        线程池数量优化
            线程池数量过大过小都会无法发挥系统的最优性能，线程池大小不需要非常精确，只要避免极大或者极小的情况即可，一般来说
            线程池大小需要考虑CPU数量，内存大小等因素

            线程池大小 = CPU数量 * 目标CPU的使用率 * (1 + 等待时间与计算时间的比)

        线程池可能会吃掉程序中的异常
            解决方法：
               1、把submit方法改为execute方法
               2、对线程池submit方法进行包装
               3、可以使用submit(callable call) 方法
                    //演示线程池可能会吃掉程序中的异常
                            for (int i = 0; i < 5; i++) {
                                Future future = executorService.submit(new DivedTask(10, i));
                                try {
                                    Integer o = (Integer)future.get();//当前线程会出现阻塞
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                } catch (ExecutionException e) {
                                    e.printStackTrace();
                                }
                            }