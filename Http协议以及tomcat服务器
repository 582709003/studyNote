tomcat
    内部结构
        <Server>                                                //顶层类元素，可以包括多个Service
            <Service>                                           //顶层类元素，可包含一个Engine，多个Connecter
                <Connector>                                     //连接器类元素，代表通信接口
                        <Engine>                                //容器类元素，为特定的Service组件处理客户请求，要包含多个Host
                                <Host>                          //容器类元素，为特定的虚拟主机组件处理客户请求，可包含多个Context
                                        <Context>               //容器类元素，为特定的Web应用处理所有的客户请求
                                        </Context>
                                </Host>
                        </Engine>
                </Connector>
            </Service>
        </Server>
        Tomca的心脏是两个组件：Connecter和Container。一个Container可以选择多个Connecter，
        多个Connector和一个Container就形成了一个Service。Service可以对外提供服务，而Server服务器控制整个Tomcat的生命周期。

Tomca的两大组件：Connecter和Container
    Connecter组件
        一个Connecter将在某个指定的端口上侦听客户请求，接收浏览器的发过来的 tcp 连接请求，创建一个 Request 和 Response
        对象分别用于和请求端交换数据，然后会产生一个线程来处理这个请求并把产生的 Request 和 Response 对象传给处理
        Engine(Container中的一部分)，从Engine中获得响应并返回客户。
        Tomcat中有两个经典的Connector，一个直接侦听来自Browser的HTTP请求，另外一个来自其他的WebServer请求。
            也就是Connecter主要监听协议和端口
                Cotote HTTP/1.1 Connector在端口8080处侦听来自客户Browser的HTTP请求；
                Coyote JK2 Connector在端口8009处侦听其他Web Server的Servlet/JSP请求。
        Connector最底层使用的是Socket来进行连接的，Request和Response是按照HTTP协议来封装的，
        所以Connector同时需要实现TCP/IP协议和HTTP协议。
        Connector 最重要的功能就是接收连接请求然后分配线程让 Container 来处理这个请求，所以这必然是多线程的，多线程的处理
        是 Connector 设计的核心。

    Container组件
        Container的体系结构如下：
            Container
                --Engine 用来管理多个主机，并指定默认主机，一个Service最多只能有一个Engine；
                    --Host 对应具体的主机域名
                        --Context (对应着应用，可以有多个Context这样的应用)
                            --Wrapper(Servlet)

Tomcat Server处理一个HTTP请求的过程
    1、用户点击网页内容，请求被发送到本机端口8080，被在那里监听8080端口的的Coyote HTTP/1.1 Connector获得。
    2、Connector把该请求封装成request，并且生成一个response，交给它所在的Service的Engine来处理，并等待Engine的回应。
    3、Engine获得请求localhost/test/index.jsp，遍历匹配所有的虚拟主机Host。
    4、Engine匹配到名为localhost的Host（即使匹配不到也把请求交给该Host处理，因为该Host被定义为该Engine的默认主机），
        名为localhost的Host获得请求/test/index.jsp，匹配它所拥有的所有的Context应用。Host匹配到路径为/test的Context
        （如果匹配不到就把该请求交给路径名为“ ”的Context去处理）。
    5、path=“/test”的Context获得请求/index.jsp，在它的mapping table中寻找出对应的Servlet。
        Context匹配到URL PATTERN为*.jsp的Servlet,对应于JspServlet类。
    6、构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用JspServlet的doGet（）或doPost（）.执行业务逻辑、数据存储等程序。
    7、Context把执行完之后的HttpServletResponse对象返回给Host。
    8、Host把HttpServletResponse对象返回给Engine。
    9、Engine把HttpServletResponse对象返回Connector。
    10、Connector把HttpServletResponse对象返回给客户Browser。

    解读server.xml文件
        <?xml version="1.0" encoding="UTF-8"?>
         <!--只有一个server服务器 -->
        <Server port="8005" shutdown="SHUTDOWN">
          <Listener className="org.apache.catalina.startup.VersionLoggerListener" />
          <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
          <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
          <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
          <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

          <GlobalNamingResources>
            <Resource name="UserDatabase" auth="Container"
                      type="org.apache.catalina.UserDatabase"
                      description="User database that can be updated and saved"
                      factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
                      pathname="conf/tomcat-users.xml" />
          </GlobalNamingResources>

           <!--server服务器提供service服务，像这样的service可以有多个，如果浏览器想使用这个服务，
           那么就要使用连接器Connector，所以浏览器输入这个端口号 -->
          <Service name="Catalina">

        	<!--连接器，是一个对象，协议是http协议，浏览器输入这个8080端口的意思就是通过连接这个连接器来连上tomcat -->
            <Connector port="8080" protocol="HTTP/1.1"
                       connectionTimeout="20000"
                       redirectPort="8443" />

        <!--连上服务之后，如何提供服务呢，那么就通过服务引擎，通过服务引擎提供服务，这个引擎在文件夹上的体现就是
                apache-tomcat-8.5.24\conf\Catalina这个文件夹，这个里面是不同的主机，主机下面就是context应用，
                再下面就是代码了，删掉会自动创建;
        	    defaultHost="localhost" 如果有主机和多个虚拟主机，那么这是会默认访问localhost这个主机-->
            <Engine name="Catalina" defaultHost="localhost">
        		   <!--用来安全管理的-->
              <Realm className="org.apache.catalina.realm.LockOutRealm">
                <!-- This Realm uses the UserDatabase configured in the global JNDI
                     resources under the key "UserDatabase".  Any edits
                     that are performed against this UserDatabase are immediately
                     available for use by the Realm.  -->
                <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                       resourceName="UserDatabase"/>
              </Realm>

        		<!--主机，主机里面可以放入多个应用；为什么开发的时候把应用放到webapps里面，就是因为appBase="webapps"指
        		    定好了；unpackWARs="true" 自动解压war包；autoDeploy="true" 自动部署，war包放到运行着的服务器中时，
        		    war包自动部署了，无需重新启动服务器-->
              <Host name="localhost"  appBase="webapps"
                    unpackWARs="true" autoDeploy="true">

                    <Context>元素
                    它由Context接口定义.是使用最频繁的元素.每个<Context元素代表了运行在虚拟主机上的单个Web应用.
                    一个<Host>可以包含多个<Context>元素.每个web应用有唯一的一个相对应的Context代表web应用自身
                    .servlet容器为第一个web应用创建一个
                    <!-- Context，对应于一个Web App
                                 path : 该Context的路径名是""，故该Context是该Host的默认Context
                                 docBase : 该Context的根目录是webapps/mycontext/
                                 -->
        			<!--docBase="d:/course/myWeb" 虚拟目录，docBase表示本地项目的WebRoot绝对路径，
        			        作用就像webapps这个应用目录，里面放着应用；path="/xxx" 应用路径，URI， -->
        			<context path="/xxx" docBase="d:/course/myWeb" />
        			    或者该Context的根目录，譬如webapps/mycontext/
        			<context path="/xxx" docBase="" />

                <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                       prefix="localhost_access_log" suffix=".txt"
                       pattern="%h %l %u %t &quot;%r&quot; %s %b" />

              </Host>
        	  <!--虚拟主机name其实对应了域名，但是域名如果没有对应的虚拟主机，则会找defaultHost -->
        	  <Host name="eureka3000.com"  appBase="webapps"
                    unpackWARs="true" autoDeploy="true">
        		</Host>
            </Engine>
          </Service>
        </Server>

    tomcat 的真正启动是在 catalina.bat 设置并启动的。startup.bat 只是找到catalina.bat 然后执行catalina.bat 来启动tomat的，
    现在安装tomcat的时候不需要配置catalina-home，因为在catalina. bat命令行里已经配置了相关参数
    打war包后直接放到tomcat下并启动，war会自动解压
    DNS：域名解析服务，就是将域名和ip进行映射的服务，而提供这种服务的服务器称为DNS服务器

    域名代表的是一个服务器的虚拟主机，是通过 <Host name="localhost" >的name属性来映射域名的
    域名解析服务是一级一级找的 先从自己的电脑上的host文件找域名映射，找不到然后道当前运营商的域名解析服务找映射，
    直至全球域名服务映射；域名解析先将你的域名解析成IP从而找到服务器，然后再通过域名找到这个服务器上符合这个域名的虚拟主机；
    虚拟主机在我看来具体表现为存放应用的目录，就像webapps，当然你得要改名字，不然不同的虚拟主机就会去用一个webapps访问资源文件

    浏览器在请求服务器时如果请求地址中没有写端口号，浏览器默认访问80端口号，所以可以将服务器中的connector中的端口号改为80来适应
    浏览器的要求，这样可以实现只输入域名不用写端口号就可以访问应用

    tomcat指定虚拟主机的默认应用可以将应用名改为Root
    修改host文件时需要先将host文件复制出来修改完再粘回去，不然即使在host文件中修改了也不会让你保存
