设计模式的七大原则
    1、单一职责原则
        介绍
            对类来说，即一个类应该只负责一项职责，如类A负责两个不同的职责：职责1、职责2，当职责1需求变更而改变A时，可能造成职责2
            执行错误，所以需要将类A的粒度分解为A1类,A2类;
    2、接口隔离原则
        介绍：
            客户端不应该依赖他不需要的接口，即一个类对另一个类的依赖应该建立在最小接口上；
        如何使用接口隔离原则？
            将接口拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则
    3、依赖倒转原则
        介绍：
            1、高层模块不应依赖低层模块，二者都应该依赖其抽象
            2、抽象不应该依赖细节，细节应该依赖抽象
            3、依赖倒转的中心思想是面向接口编程
            4、依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多，以抽象为基础搭建的架构比以细节为基础的架构要
                稳定的多。在java中，抽象指的是接口或抽象类，细节就是具体的实现类
            5、使用接口或抽象类的目的是制定好规范，而不涉及任何具体操作，把展现细节的任务交给他们的实现类去完成
        注意点
            1、低层模块尽量都要有抽象类或者接口，或者两者都有，程序稳定性更好
            2、变量的声明类尽量使抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，程序有利于扩展和优化
            3、继承时遵顼里式替换原则
    4、里氏替换原则
        介绍
            1、在子类中尽量不要重写父类的方法
            2、里式替换原则告诉我们，继承实际上让两个耦合性增强了，在适当的情况下，可以通过聚合、组合、依赖来解决所有问题
        通用做法
            1、原来的父类和子类现在都继承一个更加通俗的基类，原有的继承关系去掉，采用依赖、聚合、组合等关系替代
    5、开闭原则
        介绍
            1、一个软件实体如类，模块和函数应该遵顼对外扩展开放(提供方)，对修改关闭(使用方的代码尽量不修改)。用抽象构建框架，用实现扩展细节
            2、当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化
    6、迪米特法则
        介绍
            1、一个对象应该对其它对象保持最少的了解
            2、类和类关系越密切，耦合度越大
            3、迪米特法则又叫最少知道法则，即一个类对自己依赖的类知道的越少也好。也就是说，对于被依赖的类不管对么复杂，都尽量
               将逻辑封装在类的内部，对外除了提供的public方法，不对外泄漏任何消息
            4、迪米特法则还有个更简单的定义：只和直接的朋友通信
            5、直接的朋友：每个对象都会和其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间朋友关系。耦合的方式
               很多，依赖、关联、组合、聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中
               的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部
        注意点
            1、此法则核心时降低类之间的耦合
            2、由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类之间(对象之间)的耦合关系，并不是要求完全没有依赖关系
    7、合成复用原则
        介绍
            尽量使用合成/聚合的方式(以成员变量或者方法参数的形式)，而不是实现继承

类与类的关系
    1、依赖关系
        介绍
            只要是类中用到了其他类，那么他们之间就存在依赖关系
    2、泛化
        介绍
            实际上就是继承关系，他是依赖关系的特例
    3、实现
        介绍
            实际上就是A类实现B类
    4、关联
        介绍
            类与类之间的联系，他是依赖关系的特例
            关联具有导航性，即双向关系或者单向关系
    5、聚合
        介绍
            表示的时整体和部分的关系，整体与部分可以分开
    6、组合
        介绍
            也是整体与部分的关系，但是整体与部分不可以分开

设计模式的类型
    1、创建型模式：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式
    2、结构形模式：适配器模式、桥接模式、装饰者模式、组合模式、外观模式、享元模式、代理模式
    3、行为形模式：模板方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、
                 策略模式、职责链模式

单例模式
    步骤
        1、构造器私有化(防止 new)
        2、在类的内部创建对象
        3、向外暴露一个静态的公共方法以获取这个对象


监听器设计模式
观察者模式
    将被监听者的状态改变定义为事件，譬如servletContext创建事件，被监听者定义为事件源也称为被观察者，监听器称为观察者，
    对监听器的通知称为触发监听器，本质与观察者模式是相同的
    事件里面要可以获得事件源，也可以获得事件类型；事件源里面需要注册监听器，还得可以触发监听器；监听器要可以处理事件；

   被观察者里面可以注册观察者并且可以发布事件，发布事件的方法里调用观察者里面的方法（也就是触发监听器），监听器里面有事件属性，
   这个事件是自定义的，但是要实现事件接口，这样就可以实现在监听器里面对你想要处理的对象，譬如request,session,servletContext
   进行自定义的逻辑处理。

    spring源码中是通过事件类型找到对应处理的监听器，如何找的呢，是通过在创建监听器时，类的泛型给以对应的事件类型
    Spring事件的原理
    原理: 是观察者模式
    Spring的事件监听有三个组成部分:
    1. 事件(ApplicationEvent):要广播,发送的消息. 监听器监听的事情
    2. 监听器(ApplicationListener): 观察者模式中的观察者, 监听器监听特定事件, 并在内部定义了事件发生后的相应逻辑.
    3. 事件发布器(ApplicationEventMulticaster):对应于观察者模式中的被观察者/主题.负责通知观察者. 对外提供发布事件和增删事件监听
                                            spring种有很多事件，统一由事件发布器发布
装饰者模式
    //接口
    public interface ISomeService
    {
        String doSome();

    }

    //需要被装饰的类
    public class SomeService implements ISomeService {
        @Override
        //待增强的方法
        public String doSome() {
            return "aasdf";
        }
    }

    //装饰者父类
    //要求1：要有无参构造器
    //要求2：不对目标方法进行任何增强
    public abstract class SomeServiceWapper implements ISomeService
    {
        private ISomeService someService;

        public SomeServiceWapper() {
        }

        public SomeServiceWapper(ISomeService iSomeService) {
            this.someService = iSomeService;
        }

        @Override
        public String doSome() {
            return someService.doSome();
        }
    }

    //装饰者
    public class SomeServiceDecorator extends SomeServiceWapper {

        public SomeServiceDecorator(ISomeService iSomeService) {
            super(iSomeService);
        }

        @Override
        public String doSome() {
            String s = super.doSome();
            String s1 = s.toUpperCase();
            return s1;
        }
    }

    //装饰者
    class OtherServiceDecorator extends SomeServiceWapper {

        public OtherServiceDecorator(ISomeService iSomeService) {
            super(iSomeService);
        }

        @Override
        public String doSome() {
            String s = super.doSome();
            String s1 = s.trim();
            return s1;
        }
    }


    使用
        ISomeService iSomeService = new SomeService();
        SomeServiceWapper someServiceWapper = new SomeServiceDecorator(iSomeService);
        SomeServiceWapper someServiceWapper1 = new OtherServiceDecorator(someServiceWapper);
        String s = someServiceWapper1.doSome();
        System.out.println(s);

    实际使用：完整的装饰模式包括四部分
        一个抽象的蛋糕类： InputStream;
        多个具体的待装饰的蛋糕类：FileInputStream;ByteArrayInputStream
        一个抽象的装饰类 ：FileInputStream;
        多个具体的装饰类：BufferedInputStream, DataInputStream

        装饰者模式重点在于装饰类的父类，这个父类里面有一个待装饰类的接口属性，然后通过构造器将待装饰的对象传进来，
        然后进行装饰；

   装饰者设计模式
       能够在不修改目标类也不继承的情况下，动态扩展一个类的功能，他是通过扩展一个包装对象，也就是装饰者来达到增强目标类的目的；

       装饰者设计模式的实现有两个要求
       1、装饰者类与目标类要实现相同的接口或继承自相同的抽象类
       2、装饰者中要有目标类的引用作为成员变量，而具体的赋值一般通过带参构造器完成
           这两个要求的目的是，在装饰者类中的方法可以调用目标类中的方法，以增强这个方法，而增强这个方法是通过重
           写的方式进行增强，所以要求实现相同的接口或继承相同的抽象类

           装饰者父类
               要求1：要有无参构造器
               要求2：不对目标方法进行任何增强
           具体装饰者
               继承自装饰者父类；要由带参构造器，参数是接口；具体装饰者只对装饰者父类业务方法进行某一种增强

代理模式
    代理模式的作用
        1、功能增强：原有的功能上增加了新的功能
        2、控制访问：代理类不让你访问目标，例如商家不让你访问厂家
    实现代理的方式
        1、静态代理
            1）代理类是我们自己手工实现的，自己创建一个java类，表示代理类
            2）同时你所需要代理的目标类是确定的
            public class BuyHouseImpl implements BuyHouse {
             9
            10     @Override
            11     public void buyHosue() {
            12         System.out.println("我要买房");
            13     }
            14 }

            public class BuyHouseProxy implements BuyHouse {
            11
            12     private BuyHouse buyHouse;
            13
            14     public BuyHouseProxy(final BuyHouse buyHouse) {
            15         this.buyHouse = buyHouse;
            16     }
            17
            18     @Override
            19     public void buyHosue() {
            20         System.out.println("买房前准备");
            21         buyHouse.buyHosue();
            22         System.out.println("买房后装修");
            23
            24     }
            25 }
        2、动态代理
            在静态代理类中目标类有很多的时候，可以使用动态代理，避免静态代理的缺点
            动态代理中目标类即使很多，1）代理类数量可以很少 2）当你修改了接口中的方法时，不会影响代理类

            动态代理：在程序的执行过程中，使用jdk的反射机制，创建代理类对象，并动态的指定要代理的目标类
                    换句话说，动态代理是一种创建java对象的能力，让你不用创建taobao类就能创建代理类对象
                    jdk动态代理必须有接口，目标类必须实现接口，没有接口时，需要使用cglib动态代理
            实现方式有两种
                1、jdk动态代理(理解)：使用java反射包中的类和接口实现动态代理的功能
                    public class DynamicProxyHandler implements InvocationHandler {
                    12
                    13     private Object object;
                    14
                    15     public DynamicProxyHandler(final Object object) {
                    16         this.object = object;
                    17     }
                    18
                    19     @Override
                    20     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                    21         System.out.println("买房前准备");
                    22         Object result = method.invoke(object, args);
                    23         System.out.println("买房后装修");
                    24         return result;
                    25     }
                    26 }
                    复制代码
                    第二步：编写测试类

                    复制代码
                     1 package main.java.proxy.test;
                     2
                     3 import main.java.proxy.BuyHouse;
                     4 import main.java.proxy.impl.BuyHouseImpl;
                     5 import main.java.proxy.impl.DynamicProxyHandler;
                     6
                     7 import java.lang.reflect.Proxy;
                     8
                     9 /**
                    10  * @Auther: dan gao
                    11  * @Description:
                    12  * @Date: 20:38 2018/1/12 0012
                    13  */
                    14 public class DynamicProxyTest {
                    15     public static void main(String[] args) {
                    16         BuyHouse buyHouse = new BuyHouseImpl();
                    17         BuyHouse proxyBuyHouse = (BuyHouse) Proxy.newProxyInstance(BuyHouse.class.getClassLoader(), new
                    18                 Class[]{BuyHouse.class}, new DynamicProxyHandler(buyHouse));
                    19         proxyBuyHouse.buyHosue();
                    20     }
                    21 }
                    注意Proxy.newProxyInstance()方法接受三个参数：
                        ClassLoader loader:指定当前目标对象使用的类加载器,获取加载器的方法是固定的
                        Class<?>[] interfaces:指定目标对象实现的接口的类型,使用泛型方式确认类型
                        InvocationHandler:指定动态处理器，执行目标对象的方法时,会触发事件处理器的方法
                2、clib动态代理
                    需要第三方cglib  jar包
                        public class CglibProxy implements MethodInterceptor {
                        15     private Object target;
                        16     public Object getInstance(final Object target) {
                        17         this.target = target;
                        18         Enhancer enhancer = new Enhancer();
                        19         enhancer.setSuperclass(this.target.getClass());
                        20         enhancer.setCallback(this);
                        21         return enhancer.create();
                        22     }
                        23
                        24     public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
                        25         System.out.println("买房前准备");
                        26         Object result = methodProxy.invoke(object, args);
                        27         System.out.println("买房后装修");
                        28         return result;
                        29     }
                        30 }

                        第二步：创建测试类

                        复制代码
                         1 package dan.proxy.test;
                         2
                         3 import dan.proxy.BuyHouse;
                         4 import dan.proxy.impl.BuyHouseImpl;
                         5 import dan.proxy.impl.CglibProxy;
                         6
                         7 /**
                         8  * @Auther: dan gao
                         9  * @Description:
                        10  * @Date: 20:52 2018/1/16 0016
                        11  */
                        12 public class CglibProxyTest {
                        13     public static void main(String[] args){
                        14         BuyHouse buyHouse = new BuyHouseImpl();
                        15         CglibProxy cglibProxy = new CglibProxy();
                        16         BuyHouseImpl buyHouseCglibProxy = (BuyHouseImpl) cglibProxy.getInstance(buyHouse);
                        17         buyHouseCglibProxy.buyHosue();
                        18     }
                        19 }
                        CGLIB代理总结： CGLIB创建的动态代理对象比JDK创建的动态代理对象的性能更高，但是CGLIB创建代理对象
                        时所花费的时间却比JDK多得多。所以对于单例的对象，因为无需频繁创建对象，用CGLIB合适，反之使用JDK
                        方式要更为合适一些。同时由于CGLib由于是采用动态创建子类的方法，对于final修饰的方法无法进行代理。

工厂模式
    简单工厂模式
        有一个工厂类，在这个工厂类里面有一个创建对象的方法，方法参数为可以判定需要创建的对象类型的标识，通过标识创建不同的对象；
   工厂方法模式(Factory Method)：只能生产一种产品
        有一个父工厂接口，这个工厂接口定义了工厂的创建对象的功能，然后创建几个具体的对象工厂类实现这个接口，不同的工厂创建
        不同的具体对象；
        public interface Phone {
            void make();
        }

        //AbstractFactory类：生产不同产品的工厂的抽象类
        public interface AbstractFactory {
            Phone makePhone();
        }

        //XiaoMiFactory类：生产小米手机的工厂（ConcreteFactory1）
        public class XiaoMiFactory implements AbstractFactory{
            @Override
            public Phone makePhone() {
                return new MiPhone();
            }
        }

        //AppleFactory类：生产苹果手机的工厂（ConcreteFactory2）
        public class AppleFactory implements AbstractFactory {
            @Override
            public Phone makePhone() {
                return new IPhone();
            }
        }

        演示：
        public class Demo {
            public static void main(String[] arg) {
                AbstractFactory miFactory = new XiaoMiFactory();
                AbstractFactory appleFactory = new AppleFactory();
                miFactory.makePhone();            // make xiaomi phone!
                appleFactory.makePhone();        // make iphone!
            }
        }

  抽象工厂模式(Abstract Factory)：抽象工厂是可以生产多个产品的
    有一个父工厂接口，这个工厂接口定义了工厂的创建对象的功能，然后创建几个具体的对象工厂类实现这个接口，不同的工厂创建
    不同的具体对象，但是这些工厂类里面可以创建多种类型的对象；
    //PC类：定义PC产品的接口(AbstractPC)
    public interface PC {
        void make();
    }

    //MiPC类：定义小米电脑产品(MIPC)
    public class MiPC implements PC {
        public MiPC() {
            this.make();
        }
        @Override
        public void make() {
            // TODO Auto-generated method stub
            System.out.println("make xiaomi PC!");
        }
    }

    //MAC类：定义苹果电脑产品(MAC)
    public class MAC implements PC {
        public MAC() {
            this.make();
        }
        @Override
        public void make() {
            // TODO Auto-generated method stub
            System.out.println("make MAC!");
        }
    }

    下面需要修改工厂相关的类的定义：
    //AbstractFactory类：增加PC产品制造接口
    public interface AbstractFactory {
        Phone makePhone();
        PC makePC();
    }

    //XiaoMiFactory类：增加小米PC的制造（ConcreteFactory1）
    public class XiaoMiFactory implements AbstractFactory{
        @Override
        public Phone makePhone() {
            return new MiPhone();
        }
        @Override
        public PC makePC() {
            return new MiPC();
        }
    }

    //AppleFactory类：增加苹果PC的制造（ConcreteFactory2）
    public class AppleFactory implements AbstractFactory {
        @Override
        public Phone makePhone() {
            return new IPhone();
        }
        @Override
        public PC makePC() {
            return new MAC();
        }
    }

    //演示：
    public class Demo {
        public static void main(String[] arg) {
            AbstractFactory miFactory = new XiaoMiFactory();
            AbstractFactory appleFactory = new AppleFactory();
            miFactory.makePhone();            // make xiaomi phone!
            miFactory.makePC();                // make xiaomi PC!
            appleFactory.makePhone();        // make iphone!
            appleFactory.makePC();            // make MAC!
        }
    }


工厂模式-构建者模式
    一般有以下几个角色
        抽象建造者,接口（builder）：描述具体建造者的公共接口，一般用来定义建造细节的方法，并不涉及具体的对象部件的创建。
        具体建造者，实现类（ConcreteBuilder）：描述具体建造者，并实现抽象建造者公共接口，这个建造者里面定义了一些制造这个产品
                                            需要的不同部分构成的方法，以及返回这个产品的方法。
        指挥者（Director）：调用具体建造者里面制造产品各个部分的方法来创建复杂对象（产品）的各个部分，并按照一定顺序（流程）来建造复杂对象。
        产品（Product）：描述一个由一系列部件组成较为复杂的对象。
    具体代码
        建造者：Builder.java
        /**
         * Builder.java
         *  建造者
         */
        abstract class Builder {
            //地基
            abstract void bulidA();
            //钢筋工程
            abstract void bulidB();
            //铺电线
            abstract void bulidC();
            //粉刷
            abstract void bulidD();
            //完工-获取产品
            abstract Product getProduct();
        }

        产品：Product.java
        /**
         * Product.java
         *  产品（房子）
         */
        public class Product {
            private String buildA;
            private String buildB;
            private String buildC;
            private String buildD;
            public String getBuildA() {
                return buildA;
            }
            public void setBuildA(String buildA) {
                this.buildA = buildA;
            }
            public String getBuildB() {
                return buildB;
            }
            public void setBuildB(String buildB) {
                this.buildB = buildB;
            }
            public String getBuildC() {
                return buildC;
            }
            public void setBuildC(String buildC) {
                this.buildC = buildC;
            }
            public String getBuildD() {
                return buildD;
            }
            public void setBuildD(String buildD) {
                this.buildD = buildD;
            }
            @Override
                public String toString() {
                    return buildA+"\n"+buildB+"\n"+buildC+"\n"+buildD+"\n"+"房子验收完成";
                }
        }

        具体建造者：ConcreteBuilder.java
        /**
         * ConcreteBuilder.java
         *  具体建造者(工人)
         */
        public class ConcreteBuilder extends Builder{
            private Product product;
            public ConcreteBuilder() {
                product = new Product();
            }
            @Override
            void bulidA() {
                product.setBuildA("地基");
            }
            @Override
            void bulidB() {
                product.setBuildB("钢筋工程");
            }
            @Override
            void bulidC() {
                product.setBuildC("铺电线");
            }
            @Override
            void bulidD() {
                product.setBuildD("粉刷");
            }
            @Override
            Product getProduct() {
                return product;
            }
        }

        指挥者：Director.java
        /**
         * Director.java
         *  指挥者
         */
        public class Director {
            //指挥工人按顺序造房
            public Product create(Builder builder) {
                builder.bulidA();
                builder.bulidB();
                builder.bulidC();
                builder.bulidD();
                return builder.getProduct();
            }
        }

        测试类：Test.java
        /**
         * Test.java
         *  测试类
         */
        public class Test {
            public static void main(String[] args) {
                Director director = new Director();
                Product create = director.create(new ConcreteBuilder());
                System.out.println(create.toString());
            }
        }


 适配器模式
    适配器模式涉及3个角色：
        源（Adaptee）：需要被适配的对象或类型，相当于插头。
        适配器（Adapter）：连接目标和源的中间对象，相当于插头转换器。
        目标（Target）：期待得到的目标，相当于插座。
    适配器模式包括3种形式：类适配器模式、对象适配器模式、接口适配器模式（或又称作缺省适配器模式）。在我看来，
                        适配器模式最主要想做的仅仅是能在适配器类里调用到不同类的特定方法
    类适配器模式
        Adaptee类并没有method2()方法，而客户端则期待这个方法。为使客户端能够使用Adaptee类，我们把Adaptee与Target衔接起来。
        Adapter与Adaptee是继承关系，这决定了这是一个类适配器模式
        代码实现：
            源：
            public class Adaptee {
                public void method1(){
                    System.out.println("method 1");
                }
            }

            目标：
            public interface Target {
                void method1();
                void method2();
            }

            适配器：
            public class Adapter extends Adaptee implements Target {
                @Override
                public void method2() {
                    System.out.println("method 2");
                }
            }

        // 测试
        class AdapterTest {
            public static void main(String[] args) {
                Adapter adapter = new Adapter();
                adapter.method1();
                adapter.method2();
            }
        }

    对象适配器模式
        Adaptee类并没有method2()方法，而客户端则期待这个方法。与类适配器模式一样，为使客户端能够使用Adaptee类，我们把
        Adaptee与Target衔接起来。但这里我们不继承Adaptee，而是把Adaptee封装进Adapter里。这里Adaptee与Adapter是组合关系

        Target和Adaptee和上面的类适配器一样，不再贴出。
        适配器：
            public class Adapter implements Target {
                private Adaptee adaptee;

                public Adapter(Adaptee adaptee) {
                    this.adaptee = adaptee;
                }

                @Override
                public void method1() {
                    adaptee.method1();
                }

                @Override
                public void method2() {
                    System.out.println("method 2");
                }
            }

            class AdapterTest {
                public static void main(String[] args) {
                    Adapter adapter = new Adapter(new Adaptee());
                    adapter.method1();
                    adapter.method2();
                }
            }

    使用多个适配器编程，每个适配器只处理对应的逻辑,使用了对象适配器
        public interface ICooker{
            String cook();
        }

        public interface IProgramer {
            String iProgramer();
        }

        public interface IMultiWorkerAdapter {
            String work(Object worker);
            boolean supports(Object worker);
        }

        public class ProgramerAdapter implements IMultiWorkerAdapter {
            @Override
            public String work(Object worker) {
                return ((IProgramer)worker).iProgramer();
            }

            @Override
            public boolean supports(Object worker) {
                return worker instanceof IProgramer;
            }
        }

        public class CookAdapter implements IMultiWorkerAdapter {
            @Override
            public String work(Object worker) {
                return ((ICooker)worker).cook();
            }

            @Override
            public boolean supports(Object worker) {
                return worker instanceof ICooker;
            }
        }

        public class JdProgramer implements IProgramer {
            @Override
            public String iProgramer() {
                return "京东程序员";
            }
        }

        public class QjdCooker implements ICooker {
            @Override
            public String cook() {
                return "全聚德厨师";
            }
        }

        public static void main(String[] args) {
                ICooker qjdCooker = new QjdCooker();
                IProgramer jdProgramer = new JdProgramer();
                List list = new ArrayList<>();
                list.add(qjdCooker);
                list.add(jdProgramer);

                //使用多个适配器编程，每个适配器只处理对应的逻辑
                for (int i = 0; i < list.size(); i++) {
                    IMultiWorkerAdapter adapter = getAdapter(list.get(i));
                    System.out.println(adapter.work(list.get(i)));
                }
            }

            private static IMultiWorkerAdapter getAdapter(Object worker) {
                List<IMultiWorkerAdapter> adapters = getAllAdapters();
                for (IMultiWorkerAdapter adapter:adapters) {
                    if(adapter.supports(worker)){
                        return adapter;
                    }
                }
                return null;
            }

            private static List<IMultiWorkerAdapter> getAllAdapters() {
                List list = new ArrayList<IMultiWorkerAdapter>();
                list.add(new CookAdapter());
                list.add(new ProgramerAdapter());
                return list;
            }

    不同的适配器共同实现一个接口，不同的适配器处理不同的目标，多所以目标也是要共同实现同一个接口，然后通过适配器里面的supports方法
    判断传进来的目标应该使用哪一个适配器；
    适配器模式和代理模式的区别：代理模式的代理类需要实现被代理类，代理方法名是一样的；

模板方法模式
    1：模板模式特点：
    模板模式主要由抽象的模板类，具体的模板类以及测试类三部分组成。其中在抽象的模板类中可以定义基本方法
    第一部分是由protected修饰的方法让子类继承，实现自己的逻辑，从而将一部分方法的实现延迟到子类上；
    第二部分是由抽象类已经实现的具体方法，该方法的实现和具体的子类无关），模板方法（该方法由final修饰，
    子类不可以直接更改重写，其目的就是为了保证该类的算法基本框架，子类可以做具体的实现，但是不可以改变执行顺序或者
    增加减少执行数量），钩子方法（protected类型，作用于模板方法，因为子类不可以直接修改模板方法，所以在模板方法中加逻辑控制，
    这样子类重写钩子方法就相当于间接改变了模板方法）。

    2：模板模式实现：
    抽象的模板类：
    public abstract class DoFishTemplate {
    	// 基本方法:1:由子类继承具体实现的抽象方法；2:父类实现的具体方法。
    	// 做菜的第一步：备菜
    	protected abstract void preparation();
    	// 做菜的第二步:炒菜
    	protected abstract void cooking();
    	// 做菜的第三部：上菜
    	protected abstract void server();
    	// 做菜的第四部：洗锅。由父类具体实现。不管做什么菜这个步骤是固定不可改变的
    	protected void wash() {
    		System.out.println("父类已经实现：洗锅");
    	}
    	// 模板方法，将基本方法进行组装，从而形成做菜的算法框架。
    	 public final void dofish() {
    		if (isPreparation()) {
    			this.preparation();
    		}
    		this.cooking();
    		this.server();
    		this.wash();
    	}
    	// 钩子方法。返回值确定模板方法是否调用基本方法
    	// 默认是备菜的。当做凉菜的时候不需要备菜，做热菜需要备菜。
    	public boolean isPreparation() {
    		return true;
    	}
    }
    具体的实现类：
    public class ColdFish extends DoFishTemplate {
    	private boolean isPreparation;
    	@Override
    	protected void preparation() {
    		System.out.println("凉菜的准备阶段");
    	}
    	@Override
    	protected void cooking() {
    		System.out.println("凉菜的制作阶段");
    	}
    	@Override
    	protected void server() {
    		System.out.println("凉菜的上菜阶段");
    	}
    	// 子类重新钩子方法。决定是否需要备菜
    	public boolean isPreparation() {
    		return isPreparation;
    	}
    	public void setPreparation(boolean isPreparation) {
    		this.isPreparation = isPreparation;
    	}
    }
    测试类：
    public class DoFishTest {
    	public static void main(String[] args) {
    		// 向上转型(非静态编译看左，运行看右。静态的都看左)
    		// 若子类重写了父类的方法则调用的是子类自己的逻辑，若没有重写则调用父类的逻辑
    		// 编译错误，因为父类无此方法。
    		// coldFish.setPreparation(false);
    		//向上转型后再向下转型
    		((ColdFish) coldFish).setPreparation(false);
    		coldFish.dofish();
    	}