注解的概述
    从jdk1.5开始引入的新技术
    作用：
        1、不是程序本身，但可以对程序做出解释
        2、可以被其他程序(比如：编译器等)读取
    注解在那里使用
        可以附加在包，类，方法，属性等上面，相当于给他们添加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问
        注解是通过反射的方式来读取的

内置注解
    1、@override 重写
    2、@Deprecated 过时的，不推荐使用，有更好的，但是可以使用，
    3、@SuppressWarnings  用来抑制编译器警告

元注解
    元注解的作用就是负责注解其他的注解(@Target(ElementType.ANNOTATION_TYPE))
    有四个元注解：@Target:用于描述注解的适用范围(即被描述的注解可以用在什么地方)
                @Retention：表示需要在什么级别保存该注释信息，用于描述注解的生命周期(SOURCE<CLASS<RUNTIME)
                @Documented:说明该注解将被包含在javaDoc中
                @Inherited：说明子类可以继承父类中的该注解

自定义注解
    使用@Interface自定义注解时，自动继承了java.lang.annotation.Annotation接口

    分析：
        1、@Interface用来声明一个注解，格式：public @Interface 注解名{定义内容}
        2、其中的每一个方法实际上是声明了一个配置参数 结构:参数类型 + 参数名();
        3、方法的名称就是参数的名称
        4、返回值类型就是参数的类型(返回值类型只能是基本类型、Class、String、enum)
        5、可以通过default来声明参数的默认值
        6、如果只有一个参数成员，一般参数名为value
        7、注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0作为默认值