IOC
    作用
        1、容器创建完成的时候，容器里的对象也创建好了
        2、默认创建的对象是单例的
        3、ioc创建对象的时候会利用对象的setter方法为javaBean设置属性值

    创建对象
        1、静态工厂
            (不需要创建对象) factory-method="getUser"指定哪个方法是工厂方法,此方法要是静态的，
            这个bean返回的不是MyFactoryBean的实例，而是getUser方法返回的实例

            <bean id="factoryBean" class="com.happiness.factory.MyFactoryBean" factory-method="getUser"></bean>

         2、实例工厂
                1、先配置实例工厂
                2、配置我们要创建的user使用的是哪个工厂
                    1)配置 factory-bean指定工厂实例
                    2)配置factory-method指定使用哪个工厂方法创建对象-->
            <bean id="factoryBean2" class="com.happiness.factory.MyFactoryBean"></bean>
            <bean id="user" class="com.happiness.pojo.User" factory-bean="factoryBean2" factory-method="getUser"></bean>

         3、FactoryBean
            介绍
                是spring规定的一个接口，只要实现了这个接口的实现类，spring都认为是一个工厂
            内部方法
                1、T getObject() throws Exception：返回创建的对象，只在获取的时候才会创建
                2、Class<?> getObjectType()：返回创建的对象类型，spring会自动调用这个方法来确认创建的对象是什么类型
                3、default boolean isSingleton() {
                  		return true;
                  	}：

             使用工厂的步骤
                1、编写一个实现类
                2、在spring配置文件中配置，和普通的对象注册一样

    底层原理
        xml的解析
        工厂模式
        反射:bean的创建默认就是利用反射new出来的bean实例
    ioc目的：解耦
        ioc的思想基于IOC容器完成，IOC容器底层就是对象工厂；
        Spring提供IOC容器实现的两种方式（两个接口）
        1、BeanFactory
            IOC容器基本实现，是spring内部的实现接口，不提供开发人员使用；
            加载配置文件的时候不会创建对象，而是在获取的时候创建对象

            BeanFactory总结
                分析了从BeanFactory到ConfigurableListableBeanFactory接口的概要功能
                BeanFactory-->SpringIoC容器顶级接口,定义了对单个bean的获取,对bean的作用域判断,获取bean类型,获取bean别名的功能
                ListableBeanFactory-->扩展了BeanFactory接口,并提供了对bean的枚举能力
                HierarchicalBeanFactory-->扩展了BeanFactory接口,并提供了访问父容器的能力
                AutowireCapableBeanFactory-->扩展了BeanFactory接口,并提供了自动装配能力
                ConfigurableBeanFactory-->扩展了HierarchicalBeanFactory,并提供了对容器的配置能力
                ConfigurableListableBeanFactory-->扩展了ListableBeanFactory, AutowireCapableBeanFactory, ConfigurableBeanFactory接口,并提供了忽略依赖,自动装配判断,冻结bean的定义,枚举所有bean名称的功能
                以上介绍BeanFactory接口的分支,下面介绍AliasRegistry接口的分支,该分支下大部分都是实现类,代码较多,也较为复杂,其中细节,留在以后分析,下面只说下类的主要作用

                2. AliasRegistry接口及其实现类简介
                AliasRegistry-->定义bean的别名管理
                SimpleAliasRegistry-->实现别名管理接口
                SingletonBeanRegistry-->提供单例注册,查询服务
                DefaultSingletonBeanRegistry-->实现单例与DisposableBean的生命周期管理(创建,维护,销毁)
                FactoryBeanRegistrySupport-->添加工厂方式创建类FactoryBean的支持

        2、ApplicationContext
            代表ioc容器
            BeanFactory接口的子接口，提供更多强大的功能，一般开发人员使用；
            加载配置文件的时候创建对象

    bean管理
        1、基于xml的创建方式创建对象，默认执行的是无参构造方法
        2、设置属性的null值
            <bean id="role" class="com.happiness.com.sjd.common.Role">
                  <property name="roleDesc">
                      <null/>
                  </property>
              </bean>
        3、设置属性带有特殊符号值
            <bean id="role" class="com.happiness.com.sjd.common.Role">
                    <property name="roleDesc">
                        <value>
                            <![CDATA[<<南京>>]]>
                        </value>
                    </property>
                </bean>

            bean可以理解为对象

        4、设置属性的引用值

        4、IOC操作Bean管理(FactoryBean)
            1、Spring中有两种bean，一种普通的bean，一种是工厂bean(FactoryBean)，这是sping内置的bean
                1、普通bean：配置文件中配置什么类型返回的就是什么类型
                2、FactoryBean：在配置文件中定义的bean类型和返回的类型不一样
                    public class MyFactoryBean  implements FactoryBean<Role>{
                        @Override
                        public Role getObject() throws Exception {
                            return new Role();
                        }

                        @Override
                        public Class<?> getObjectType() {
                            return Role.class;
                        }
                    }


                   ApplicationContext applicationContext = new ClassPathXmlApplicationContext("beans.xml");
                   MyFactoryBean myFactoryBean = applicationContext.getBean("myFactoryBean", MyFactoryBean.class);
                   System.out.println(myFactoryBean);

                   如果想要返回的是factoryBean类型，则需要再beanname前加上&符号

        5、bean的作用域
            1、在spring中可以设置创建的bean实例是单例的还是多例的
            2、在spring中，默认情况下创建的实例是一个单例的
            基于xml文件中可以使用scope属性，值singleton：单例  prototype：多例

        6、bean的生命周期
            单实例bean容器启动的时候就创建，多实例bean获取的时候才会创建bean
            1、生命周期
                1）通过构造器创建bean实例（无参构造器）
                2）为bean属性设置值和aware接口需要实现的方法（调用set方法）
                3）调用bean的初始化方法（需要进行配置，方法自定义，不可以有参数） init-method="init"
                4）bean的使用
                5）当容器关闭的时候，调用bean的销毁方法（多实例的对象才能调用，需要进行配置，方法自定义，不可以有参数）
                                                        destroy-method="destroy"
            不能是接口以及实现类
            <bean id="role" class="com.happiness.com.sjd.common.Role" init-method="init"
                destroy-method="destroy"></bean>
        7、bean的后置处理器，在初始化方法前后调用，BeanPostProcessor
            内部方法
                postProcessBeforeInitialization：执行init-method方法前调用
                postProcessAfterInitialization：执行init-method方法后调用
            生命周期
                1）通过构造器创建bean实例（无参构造器）
                2）为bean属性填充值和aware接口需要实现的方法（调用set方法）
                3）把bean实例传递给后置处理器的方法
                4）调用bean的初始化方法（需要进行配置）（如果没有初始化方法，也会运行后置处理器的方法）
                5）把bean实例传递给后置处理器方法
                6）bean的使用
                7）当容器关闭的时候，调用bean的销毁方法（需要进行配置）

                创建后置处理器(创建对象的过程中会用到后置处理器，和AOP不一样，那是对象创建完毕后，增强对象内某个方法)
                    1、创建类，实现BeanPostProcessor
                    2、注册到xml文件中
                配置好的后置处理器会作用于spring容器里的所有对象

        8、自动装配
            当启用扫描的时候会有一个默认的过滤器去扫描bean，但是我们也可以不适用这个默认的过滤器
            我们可以配置其他的，例如以下，这个过滤器就只会拦截用@Controller的注解的类进行创建bean
                <context:component-scan base-package="com.happiness.com.sjd" use-default-filters="false">
                    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
                    //或者不包含
                    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
                </context:component-scan>

        9、基于注解方式实现属性注入
            1、@AutoWired  spring提供的
                先根据属性类型自动装配，找到一个就赋值，没找到抛异常；如果按类型找到多个，那就按照变量名匹配
                用法
                //通过构造器注入
                private DependencyA a;

                @Autowired
                public DI(DependencyA a){
                    this.a = a;
                }
                //方法上有这个注解的话
                spring容器会在类加载后为这个方法上的每一个参数自动注入，并自动执行这个方法。
                @Autowired
                public void setDependencyB(DependencyB b){
                    this.b = b;
                }
                //通过field反射注入
                @Autowired
                private DependencyC c;

                }
            2、@Qualifier
                根据属性名称自动装配；这个注解的使用需要和@Autowired一起使用,可在方法的形参上使用
            3、@Resource  javaee提供的，如果框架不是spring了，这个还可以使用
                可以根据类型注入，也可以根据名称注入
                @Resource这样是根据类型注入
                @Resource(name="xxx")这样根据名称注入
            4、@Value
                普通类型注入


        10：spring的新注解
           @Configuration:指定当前类是一个配置类
            细节：当配置类作为AnnotationConfigApplicationContext对象创建时的参数时，可以不写此注解

            优先使用无参构造器将配置类注入容器，如果没有无参构造器使用有参构造器，有参构造器是能有一个，否则报错

           @ComponentScan:用于通过注解指定spring在创建容器时要扫描的包；
                属性：value:它和basePackages的作用是一样的，都是用于指定创建容器时要扫描的包
           @Bean:用于把当前方法的返回值作为bean对象存入spring的ioc容器中；
            属性：name：用于指定bean的id，默认是当前方法的名称
            细节：当我们使用此注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象，
                    查找方式和autowired注解的作用时一样的
           @Scope("prototype"):和@Bean配合使用,配置bean的单例或多例,默认单例
           @Import：用于在主配置类上导入其他的子配置类，可以写多个，其他子配置类上可以不写@Configuration注解
           @PropertySource:用于指定properties文件的位置；
                            属性：value:指定文件的名称和路径

        11、使用junit配合我们的测试
            spring整合junit的配置
            1、导入spring整合junit的jar包，
                <dependency>
                      <groupId>org.springframework</groupId>
                      <artifactId>spring-test</artifactId>
                      <version>5.3.2</version>
                    </dependency>
            2、在测试类（test/com/java）上使用注解@RunWith(SpringJUnit4ClassRunner.class)
            3、告知spring的运行器，spring和ioc的创建时基于xml还是基于注解的，并且说明位置
                @ContextConfiguration
                    locations：指定xml文件的位置，表示在类路径下
                    classes：指定注解类所在的位置

                当我们使用spring5.x版本时，要求junit的版本必须是4.1.2及以上

DI:依赖注入
    容器能知道哪个组件(类)运行的时候，需要另外一个组件(类)；容器通过反射的形式，将容器中准备好的对象注入到类的属性中；

    AOP
        底层原理
            1、使用cglib动态代理
        专用术语
            连接点
                类里面哪些方法可以被增强，这些方法统称为连接点
            切入点
                实际被真正增强的方法称为切入点
            通知（也可以理解为具体的增强内容）
                实际增强的逻辑部分称为通知
                通知类型
                    前置通知 切入点前执行的方法
                    后置通知@after 不管有没有异常都会执行  在finally里面执行的方法
                    环绕通知  :他是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式

                     public void pringLog(ProceedingJoinPoint pjp){
                            Object[] args = pjp.getArgs();
                            try {
                                System.out.println("Logger.pringLog  前置通知");  //前置通知
                                Object proceed = pjp.proceed(args);
                                System.out.println("Logger.pringLog  后置通知");  //最终通知
                            } catch (Throwable throwable) {
                                throwable.printStackTrace();
                                System.out.println("Logger.pringLog  异常通知");  //异常通知
                            } finally {
                                System.out.println("Logger.pringLog  最终通知");  //后置通知
                            }
                        }

                    异常通知@afterThrowing 有异常就执行  抛出异常后在catch里执行的方法
                    最终通知@afterReturning   有异常就不执行
            切面
                这是一个动作：把通知应用到切入点的过程
        AOP操作
            1、Spring框架一般都是使用AspectJ实现AOP操作
                什么是Aspectj
                    它不是spring的组成部分，独立于AOP，一般把Aspectj和spring框架一起使用，进行AOP操作

            2、切入点表达式
                execution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]))

           <!--spring基于xml配置AOP
               1、把通知bean也交给spring容器管理
               2、使用aop:config标签表明开始AOP的配置
               3、使用aop:aspect标签表明配置切面
                   id属性:给切面提供一个标识
                   ref属性：指定通知类的bean的id
                4、在aop:apectj标签的内部使用对应的标签来配置通知的类型，我们现在
                   是让log方法在切入点方法执行之前执行，所以是前置通知
                   aop:before 表示前置通知
                       method属性：用于指定logger类中哪个方法是前置通知
                       pointcut属性：用于指定切入点表达式，该表达式的含义是指的切入点

                   切入点表达式写法：
                       关键字：execution(表达式)
                       表达式：访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)
                       标准的表达式写法
                           public void com.happiness.service.impl.AccountServiceImpl.saveAccount()
                           访问修饰符可以省略，返回值可以使用通配符表示任意返回值，包名可以使用通配符表明任意包，但是有几级包
                           就需要写几个*.  ,包名可以使用..表示当前包以及子包
                           类名和方法名都可以使用通配符*来表示
                           方法的参数列表：
                               基本类型直接写名称   int
                               引用类型：包名.类名的方式  java.lang.String
                               也可以使用通配符*表示任意参数类型，但是表示的是有参数，没有参数的方法找不到；
                               可以使用..表示有无参数均可，有参数可以是任意类型

                           这样一来就变成了
                           * *..*.*(..)   最好不要这样配置
                       全通配写法
               -->

    事务（ACID）
        事务是数据库操作的最基本的单元，逻辑上一组操作，要么成功，如果有一个失败就都失败
        特性
            1、原子性
                要么成功，要么就失败
            2、一致性
                操作前后总量不变
            3、隔离性
                在多事务操作同一个数据源的时候不会相互影响
            4、持久性
                保存在硬盘上

        在spring中进行声明式事务管理，底层使用的是AOP原理
        spring事务管理API
        1、提供一个接口，代表事务管理器，这个接口针对不同的框架提供了不同的实现类

        @Transactional参数
            propagation：事务的传播行为，多“事务方法”（对数据库数据进行变化的操作）之间进行调用，
            这个过程中事务是如何进行管理的
            isolation：事务隔离级别；为解决事务的隔离性；
                不考虑隔离性的话会产生
                    脏读：
                    不可重复读：
                    幻读：
            timeout：超时时间
            readOnly：是否只读
            rollbackFor：回滚，设置出现哪些异常出现回滚
            noRollbackFor：设置出现哪些异常不出现回滚

    spring5框架自带了通用的日志框架
        1、spring5已经移除了Log4jConfigListener，官方建议使用Log4j2
        2、官方框架整合了Log4j2
        第一步引入jar包












spring源码
    spring容器内部应该是使用map数据结构进行存放bean的；
    一般创建对象方式：new  反射
    spring中默认创建的bean是单例的，通过反射而来

    spring创建一个对象：实例化（堆中分配内存）+ 初始化（给属性赋值） 初始化分两步：填充属性+执行初始化方法（init method）

    spring的扩展性是spring生态的基石

    Beanfactory的容器的根接口

    后置处理器有两种：BeanfactoryPostProcessor和BeanPostProcessor

    BeanfactoryPostProcessor：Beanfactory的后置处理器，用来进行功能扩展的，例子：在xml配置文件中，有一个属性value="${jdbc.username}",
                   Beandefinition里面的这个值就可以通过后置处理器来修改为真正的账号，这个经过后置处理器处理过的
                   beandefinition再进行实例化对象

    bean的生命周期：
        <p>Bean factory implementations should support the standard bean lifecycle interfaces
         * as far as possible. The full set of initialization methods and their standard order is:
         * <ol>
         * <li>BeanNameAware's {@code setBeanName}
         * <li>BeanClassLoaderAware's {@code setBeanClassLoader}
         * <li>BeanFactoryAware's {@code setBeanFactory}
         * <li>EnvironmentAware's {@code setEnvironment}
         * <li>EmbeddedValueResolverAware's {@code setEmbeddedValueResolver}
         * <li>ResourceLoaderAware's {@code setResourceLoader}
         * (only applicable when running in an application context)
         * <li>ApplicationEventPublisherAware's {@code setApplicationEventPublisher}
         * (only applicable when running in an application context)
         * <li>MessageSourceAware's {@code setMessageSource}
         * (only applicable when running in an application context)
         * <li>ApplicationContextAware's {@code setApplicationContext}
         * (only applicable when running in an application context)
         * <li>ServletContextAware's {@code setServletContext}
         * (only applicable when running in a web application context)
         * <li>{@code postProcessBeforeInitialization} methods of BeanPostProcessors
         * <li>InitializingBean's {@code afterPropertiesSet}
         * <li>a custom init-method definition
         * <li>{@code postProcessAfterInitialization} methods of BeanPostProcessors
         * <li>{@code postProcessBeforeDestruction} methods of DestructionAwareBeanPostProcessors
         * <li>DisposableBean's {@code destroy}
         * <li>a custom destroy-method definition
         * </ol>

    xxxxaware接口的作用：方便通过spring中的bean对象来获取对应容器中相关属性的值
    IoC容器启动
    实例化bean
    如果Bean实现了BeanNameAware接口，则调用setBeanName(String name)返回beanName，该方法不是设置beanName，而只是让Bean获取自己在BeanFactory配置中的名字
    如果Bean实现BeanFactoryAware接口，会回调该接口的setBeanFactory(BeanFactory beanFactory)方法，传入该Bean的BeanFactory，这样该Bean就获得了自己所在的BeanFactory
    如果Bean实现了ApplicationContextAware接口，则调用该接口的setApplicationContext(ApplicationContext applicationContext)方法，设置applicationContext
    如果有Bean实现了BeanPostProcessor接口，则调用该接口的postProcessBeforeInitialzation(Object bean，String beanName)方法，将此BeanPostProcessor应用于给定的新bean实例
    如果Bean实现了InitializingBean接口，则会回调该接口的afterPropertiesSet()方法
    如果Bean配置了init-method方法，则会执行init-method配置的方法
    如果Bean实现了BeanPostProcessor接口，则会回调该接口的postProcessAfterInitialization(Object bean，String beanName)方法
    到此为止，spring中的bean已经可以使用了，这里又涉及到了bean的作用域问题，对于singleton类型的bean，Spring会将其缓存;对于prototype类型的bean，不缓存，每次都创建新的bean的实例
    容器关，如果Bean实现了DisposableBean接口，则会回调该接口的destroy()方法销毁bean，
    如果用户配置了定destroy-method，则调用自定义方法销毁bean


    应用程序运行期间，能否读取当前系统的环境变量或者系统属性：Environment---System.getEnv()
                                                                    System.getProperties()

    1、基于xml的spring配置文件中，启动tomcat后，spring会先创建beanfactory，然后通过BeanDefinitionReader实现类读取配置文件中定的bean信息，分装成BeanDefinition这个对象；
        然后BeanFactory会根据BeanDefinition这个定义信息生成对象；
    2、生成对象之前你可以通过BeanFactoryPostProcessor这个接口的各种实现类对BeanDefinition进行操作，其实就是各种后置处理器，譬如
        bean的定义信息中的占位符就是通过PlaceholderConfigurerSupport这个实现类完成占位符替换的

        （注意新增知识点：在spring中出现的xxxAware.class接口存在的意义是方便通过spring中的bean对象获取对应容器中的相关属性值，实现这些接口
        后spring会自动调用是实现的方法并将相应属性值设置回来）

(额外知识点：不应该将所有的方法都放在一个接口中，也需要将不同类型功能的方法放在不同的接口，也就是接口的单一职责原则，
    譬如：一个接口定义了所有的查询功能，另一个接口定义了所有的删除功能)

    (额外知识点，spring源码中以do开头的方法都是正儿八经干活的方法)




spring、springboot启动总结
    spring启动分两种
        1、main函数启动
            直接刷新容器
        2、tomcat容器启动
            通过在web.xml里配置ContextLoaderListener监听器监听tomcat容器启动，然后触发contextInitialized方法
            在这个方法里调用initWebApplicationContext方法初始化spring web容器，然后配置容器configureAndRefreshWebApplicationContext(cwac, servletContext);
            wac.refresh();刷新容器
    springboot启动
        1、main函数启动
            调用run方法，一直到 this.refreshContext(context);也就是刷新容器

            //这个方法里会调用初始化器
            this.prepareContext(context, environment, listeners, applicationArguments, printedBanner);
            this.refreshContext(context);
            this.afterRefresh(context, applicationArguments);
        2、web容器启动
            SpringBootServletInitializer就相当于web.xml文件
            ①  启动Tomcat
            　   ②  根据上述描述的Servlet3.0+规则，可以在Spring的web模块里面找到有个文件名为javax.servlet.ServletContainerInitializer的文件，而文件的内容为org.springframework.web.SpringServletContainerInitializer，用于加载SpringServletContainerInitializer类
            　　③看看SpringServletContainerInitializer定义
            @HandlesTypes(WebApplicationInitializer.class)
            public class SpringServletContainerInitializer implements ServletContainerInitializer {
                @Override
                public void onStartup(Set<Class<?>> webAppInitializerClasses, ServletContext servletContext)
                        throws ServletException {

                    List<WebApplicationInitializer> initializers = new LinkedList<WebApplicationInitializer>();

                    if (webAppInitializerClasses != null) {
                        for (Class<?> waiClass : webAppInitializerClasses) {
                            // Be defensive: Some servlet containers provide us with invalid classes,
                            // no matter what @HandlesTypes says...
                            if (!waiClass.isInterface() && !Modifier.isAbstract(waiClass.getModifiers()) &&
                                    WebApplicationInitializer.class.isAssignableFrom(waiClass)) {
                                try {
            　　　　　　　　　　　　　　　　//为所有的WebApplicationInitializer类型创建实例,并加入集合中
                                    initializers.add((WebApplicationInitializer) waiClass.newInstance());
                                }
                                catch (Throwable ex) {
                                    throw new ServletException("Failed to instantiate WebApplicationInitializer class", ex);
                                }
                            }
                        }
                    }

                    if (initializers.isEmpty()) {
                        servletContext.log("No Spring WebApplicationInitializer types detected on classpath");
                        return;
                    }

                    servletContext.log(initializers.size() + " Spring WebApplicationInitializers detected on classpath");
                    AnnotationAwareOrderComparator.sort(initializers);
            　　　　　　//调用每一个WebApplicationInitializer实例的onstartup方法
                    for (WebApplicationInitializer initializer : initializers) {
                        initializer.onStartup(servletContext);
                    }
                }

            }
             在上面一段长长的注释中可以看到，SpringServletContainerInitializer将
             @HandlesTypes(WebApplicationInitializer.class)标注的所有WebApplicationInitializer这个
             类型的类都传入到onStartup方法的Set参数中，并通过反射为这些WebApplicationInitializer类型的类创建实例；
            ④  方法最后,每一个WebApplicationInitilizer实现调用自己onstartup方法
            　　⑤  而WebApplicationInitializer有个抽象实现类SpringBootServletInitializer（记住我们继承了该抽象类）
            ，则会调用每一个WebApplicationInitializer实例（包括SpringBootServletInitializer）的onStartup方法：



spring中的多播器的原理
    当容器刷新时会调用initApplicationEventMulticaster方法初始化一个多播器并放入容器中，
    当然你也可以自定义一个多播器，这样就会覆盖spring默认的多播器；在完成后容器的刷新后，在finishRefresh
    方法里会调用publishEvent方法，这个方法里首先会获取到此次触发监听器
    的事件和事件类型是什么，然后获取到多播器，然后使用多播器进行利用事件和事件类型在所有的监听器
    里面遍历查找符合这个事件和事件类型的监听器，然后获取到后遍历触发监听器


普通servlet整合spring的视频请看雷丰阳"spring整合javaweb"

















