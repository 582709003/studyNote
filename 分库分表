为什么要用mycat
    1、java与数据库高耦合
    2、高访问量高并发对数据库的压力
    3、读写请求数据不一致

mycat
    作用
        1、读写分离
        2、数据分片
            垂直拆分(分库)、水平拆分(分表)、垂直加水平拆分(分库分表)
            为什么要分库？
                单张表的查询瓶颈，当单张表的数据达到某一个级别时就会很慢，也会影响到数据库
            分库：一个数据库有很多表组成，每个表对应着不同的业务，垂直切分是指按照业务将表进行分类，
            分布都不同的数据库上面，这样也就将数据或者说压力分担到不同的库上面

            为什么分表？
                表达到千万级数据量，也会查询很慢
            分表：将一张表分到不同的数据库
        3、多数据源整合

    原理
        拦截了用户发送过来的sql语句，首先对sql语句做一些特定的分析，如分片分析，路由分析，读写分离分析、
        缓存分析等，然后将此sql发往后端的真实数据库，并将返回的结果做适当的处理，最终在返回给用户

    搭建读写分离
        我们需要通过mycat和mysql的主从复制配合来(先主从复制，才能搭建读写分离)搭建数据库的读写分离，实现mysql 的高可用性，我们将搭建
        一主一从、双主双从两种读写分离方式

        一主一从
            mysql主动复制原理
                redis的从机是在接入点时全量复制主机的数据；
                而mysql的从机是在接入点时复制此时间点以后的数据，之前的数据无法复制，且存在延时性

                bslance：设置成1或者3

        双主双从

    垂直分库划分原则
        一个数据库有很多表组成，每个表对应着不同的业务，垂直切分是指按照业务将表进行分类，分布都不同的
        数据库上面，这样也就将数据或者说压力分担到不同的库上面

        如何划分表
            有紧密关联关系的表应该在一个库里，相互没有关联关系(外键关联)的表可以分到不同的库里；
            不同机器上的两个表是不能join查询的

    水平拆分(分表)
        相对于垂直拆分，水平拆分不是将表做分类，而是按照某个字段的某种规则将数据分散到多个库中，
        每个表中包含一部分数据；
        1、选择要拆分的表
            mysql导表数据存储是有瓶颈的，单表达到1000万条数据就达到了瓶颈，会影响查询效率，
            需要进行水平拆分进行优化；
            以orders表为例，可以根据客户id进行划分，这样两个节点访问平均，一个客户的所有订单都在同一个节点

            分片后在mycat插入数据insert数据时，脚本需要写明字段名字，否则报错

        mycat的分片  “join”
            有关联的表也需要进行水平拆分，子表的记录与所关联的父表记录应存放在同一个数据分片上

        水平分表全局表
            考虑到字典表具有以下几个特性：
                1、变动不频繁
                2、数据量总体变化不大
                3、数据规模不大，很少有超过数十万条记录的
            鉴于此，mycat定义了一种特殊表，称之为“全局表”，具有以下特性
                1、全局表的写操作，会实时的在所有节点上执行，保持各个分片的数据一致性
                2、全局表的查询操作，只从一个节点获取
                3、全局表可以和任何一个表进行join操作
        水平分表(分片)常用规则
            1、取模
                此规则为对分片字段求模运算，也是水平分表最常用规则
            2、分片枚举
                通过在配置文件中配置可能的枚举id，自已配置分片，本规则适用于特定场景，比如有些业务需要按照
                省份或区县来保存，而全国省份区县是固定的，这类业务适用本条规则
            3、范围约定
                此分片适用于，提前规划好分片字段某个范围属于哪个分片
            4、按日期(天)分片
                此规则为按照天分片，设定时间格式、范围
                譬如按照用户的登陆日期进行划分
    分库分表计划
        1、先准备空的数据库
        2、再制定分库分表计划
        3、再通过mycat进行创建表，插入数据等操作

    分表扩展--全局序列处理
        在实现分库分表的情况下，数据库自增主键已无法保证自增主键的全局唯一，为此mycat提供了全局sequence，
        并且提供了包含本地配置和数据库配置等多种实现方式

        1、本地文件
            此方式将sequence配置到文件中，当使用到sequence中的配置后，mycat会更新classpath中的sequence_conf.properties
            文件中的sequence当前的值

            优点：本地加载，读取速度快
            缺点：抗风险能力差，mycat所在主机down机后，无法读取本地文件

        2、数据库方式
            在某一个数据库中，创建一张表专门来进行计数累加，但不是每次生成序列都读写数据库，这样效率太低，
            mycat会预加载一部分号段到mycat中，这样大部分读写序列都是在内存中完成的，如果内存中
            号段用完了，mycat会再向数据库要一次

        3、时间戳方式
            全局序列id=64位魏二进制(42(毫秒)+5(机器 id)+5(业务编码)+12(重复累加)) 换算成
            十进制18位数的long类型，每毫秒可以并发12位二进制的累加
            优点：配置简单
            缺点：18位id过长

        4、自主生成全局序列
            可以利用redis的incr命令生成序列


    mycat安全权限配置
        可以对用户是否只读做配置