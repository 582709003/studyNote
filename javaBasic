java虚拟机即jvm是在安装jdk时安装好的，不同的操作系统安装不同的jdk，所以jvm其实也是不同的，但是
不同的jvm可以执行相同的字节码，这就是为什么java可以跨平台；


Java程序的运行需要经过编译阶段以及执行阶段
    编译阶段：检查Java源程序是否符合Java语法，符合就生成字节码，不符合就无法生成字节码文件；
             字节码文件不是纯粹的字节码文件
             使用jdk中带有的javac.exe命令生成字节码文件
    运行阶段：使用jdk带有的java.exe命令，主要负责执行字节码文件；
             java.exe会启动java虚拟机，jvm会启动类加载器ClassLoder,JVM会将字节码文件
             解释为二进制文件，然后操作系统执行二进制和底层硬件平台进行交互。


jdk、jre、jvm三者关系
    首先jdk和jre是独立的两个东西，两者可以独立下载安装
    jdk是程序开发包，程序员需要使用里面的各种包工具进行开发，如果仅仅是为了开发但是你不需要测试就只安装jdk即可，但是程序员是不可能
    不运行程序的，所以一般下载安装jdk时会默认下载安装jre；
    jre：这个是运行时环境，一般会在下载jdk时自动下载这个jre，但如果不要jdk可以单独安装；
    jvm：这个就是安装jre最大的用处，jvm不可以单独下载安装，jvm是jre的一个功能；
    在安装jdk时会问你要不要再安装jre，你也可以选择不安装，因为你的额jdk下已经有了jre；

配置环境变量
    windows是如何搜索命令的：
        首先会从当前目录搜索，搜索不到的话会从环境变量的path路径中搜索，
        如何都搜索不到就报错

    系统变量和用户变量的区别
        系统变量配置的话会作用整个系统，不区别哪个用户；用户变量会作用于这个用户；

注释
    javadoc注释
        /**
          * javadoc注释
          * javadoc注释
          * javadoc注释
          .......
        **/
      这种注释以后，javadoc命令在生成javadoc帮助文档时会将这部分类容提取出来放到帮助文档里；


public class和class的区别
    一个java源文件中可以有多个class文件
    一个java源文件中不一定有public class
    一个class会定义生成一个.class字节码文件
    一个java源文件当中定义public的class的话，public 的class只能有一个
                ，并且该类名必须和java源文件名称一致

标识符的命名规则：
    只能由数字、字母、下划线、美元符号$组成，不能有其他符号；
    不能由数字开头；
    关键字不能做标识符；
    理论上无长度限制，但也不要过长


变量
    变量是由数据类型、变量名、字面值组成；局部变量需要初始化后方可访问，否则报错；
        成员变量未赋值时，系统会默认赋值
        默认值
            byte、short、int、long   0
            float、double            0.0
            boolean                 false（在c语言中，true是1，false是0）
            char                    u\0000


数据类型
    作用：不同数据类型的数据占用空间大小不同，所以数据类型的作用是指导jvm运行程序时给该数据分配多大的内存空间

    分类：分基本数据类型和引用数据类型(包含字符串、类、接口、数组.......)

    基本数据类型：四大类和八小种
        第一类：整数型
            byte、short、int、long
        第二类：浮点型
            float、double
        第三类：布尔型
            boolean
        第四类：字符型
            char
83
64 32 16 8 4 2 1
1   0  1  0 0 1 1
    字符串不属于基本数据类型，属于引用类型，字符属于基本数据类型

    基本数据类型               占用空间大小(单位：字节)
    ----------------------------------------------
    byte                        1
    short                       2
    int                         4
    long                        8
    float                       4
    double                      8
    boolean                     1
    char                        2

    计算机在任何情况下都只能识别二进制

    字节：
        1 Byte = 8 bit 一个字节等于8个比特位（一个比特位表示一个二进制位）
        1 G = 1024*1024*1024*8 的比特位，就只能存这么多0或者1

        二进制位最左边的数字为0表示整数，1表示负数

    byte类型取值范围 -128 ~ 2^7 - 1 = 127
    short类型取值范围 -2^15 ~ 2^15-1
    int类型取值范围 -2^31 ~ 2^31-1
    每一种组合的二进制就是一个数字
    ...........

    java语言中表示一个整数时有三种表达方式，
    十进制   默认方式
    八进制  以0开始
    十六进制    以0X开始

    java语言中整数字面值被默认当作int类型来处理，要让这个整数型的字面值被当作long类型来处理的话需要在字面值后面加一个l/L，建议大写L
    long s = 2147483648;
    2147483648 一开始就被默认为int类型，但是int类型最大值是2147483647，所以这个数字本身就
    溢出了，报错，所以要在后面加一个大写L，这样这个数字就会自动转换为long类型

    大容量的数字类型不能直接赋值给小容量，需要进行强制转换，即加上强制转换类型符；
    但是运行阶段可能损失精度
    强转原理：
        元数据：00000000 00000000 00000000 00000000 00000000 00000000 00000000 01100100
        墙砖后数据：00000000 00000000 00000000 01100100
        将左边的二进制去掉（所有数据强转都是这样），计算机内部都是保存的补码形式
        正数的原码、反码、补码都是一样的，但是负数 的不一样，
        原码：将最高位作为符号位（0表示正，1表示负），其它数字位代表数值本身的绝对值的数字表示方式。

        反码：如果是正数，则表示方法和原码一样；如果是负数，符号位不变，其余各位取反，则得到这个数字的反码表示形式。

        补码：如果是正数，则表示方法和原码一样；如果是负数，则将数字的反码加上1（相当于将原码数值位取反然后在最低位加1）。

    byte、short以及char类型在赋值时，虽然字面值是int类型，但是不需要强转，因为sun公司给与了优待，
    只要是在类型的取值范围类都可以编译通过，但是只要超过了就会编译报错

    当计算机碰到字符类型时传统的转换为二进制就会出问题，因为数字和二进制之间的转换规则制定好之后
    就可以简单的转换；但是字符和二进制之间的转换没有指定规则于是乎就会出问题；
    所以就出现了编码方式，例如Ascill、utf-8、gbk等等；

    空格符和制表符是不同得分asicll码

    \是转义字符，放在特殊字符之前会将特殊字符转变为普通字符

    char类型详解



字符编码
    unicode编码方式统一了全球所有文字，容量较大；它的编码方式有多种实现：
        utf-8
        utf-16
        utf-32
        ......

    java语言使用的时utf-8编码，所以标识符可以使用中文