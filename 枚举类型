枚举类的使用
    类的对象只有有限个，确定的；
    当需要定义一组常量时，强烈建议使用枚举类；枚举类里面有确定的几个对象，这几个对象都是常量
    如果枚举类中只有一个对象，那么可以作为单例模式的实现方式
如何自定义枚举类
    方式一：jdk5.0之前，自定义枚举类
        //自定义枚举类
        class Season{
           //1.0声明seeason独享的属性
               private final String seasonName;
               private final String seasonDesc;

               //2.0私有化类的构造器(因为类的对象是确定的，如果公开了构造器，那么大家都可以构造对象了)
               private Season(String seasonName,String seasonDesc){
                   this.seasonName = seasonName;
                   this.seasonDesc = seasonDesc;
               }

               //3.0提供当前枚举类的多个对象；public static final的
               public static final Season SPRING = new Season("春天","春暖花开");
               public static final Season SUMMER = new Season("夏天","夏日炎炎");
               public static final Season AUTUMN = new Season("秋天","秋高气爽");
               public static final Season WINTER = new Season("冬天","冰天雪地");


        }
    方式二：jdk5.0,可以使用enmu关键字定义枚举类
        //使用enum关键字定义枚举类，说明：定义的枚举类默认继承于java.lang.Enmu类
        public enum Season2 {
            //1.0提供当前枚举类的多个对象；public static final省略，多个对象之间用逗号分隔
            SPRING("春天","春暖花开"),
            SUMMER("夏天","夏日炎炎"),
            AUTUMN("秋天","秋高气爽"),
            WINTER("冬天","冰天雪地");

            //2.0声明season对象的属性，private final修饰
            private final String seasonDesc;
            private final String seasonName;


            //3.0私有化类的构造器(因为类的对象是确定的，如果公开了构造器，那么大家都可以构造对象了)
            private Season2(String seasonName, String seasonDesc){
                this.seasonName = seasonName;
                this.seasonDesc = seasonDesc;
            }

            //默认的枚举类的toString打印出的值是对象名称

        }



三、Enum类中的常用方法(直接用)
    values()方法：返回枚举类型的对象数组，该方法可以很方便的遍历所有的枚举值
    valueOf(String str)方法:可以把一个字符串转化为对应的枚举类对象，要求字符串必须是枚举类对象的名字，
                            如果不是，会有运行时异常:illegalArgmentException
    toString()方法：返回当前枚举类对象常量的名称
    name()方法：返回此枚举常量的名称
    ordinal()：返回此枚举在枚举声明中的位置
    compareTo():比较枚举的大小，使根据ordinal值进行比较的

四、使用enum关键字定义的枚举类实现接口的情况
    1、实现接口，在enum枚举类中实现抽象方法(和class类一样正常实现这个抽象方法就可以了)
    2、让枚举类的对象分别实现接口中的抽象方法(这样的话，每个对象都可以有自己的抽象方法的不同实现)
        SPRING("春天","春暖花开"){
                @Override
                public void show() {
                    System.out.println("这是春天");
                }
            }
            ,SUMMER("夏天","夏日炎炎"){
                @Override
                public void show() {
                    System.out.println("这是夏天");
                }
            },
            AUTUMN("秋天","秋高气爽"){
                @Override
                public void show() {
                    System.out.println("这是秋天");
                }
            },
            WINTER("冬天","冰天雪地"){
                @Override
                public void show() {
                    System.out.println("这是冬天");
                }
            };

    OPERATION(0, "操作"),
    LOGIN(1, "登录");

    private int value;
    private String desc;

    LogType(int value, String desc) {
        this.value = value;
        this.desc = desc;
    }

    @Override
    //获取值
    public Integer getValue() {
        return this.value;
    }

    @Override
    //获取描述
    public String toString() {
        return this.desc;
    }