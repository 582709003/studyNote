一、servlet规范
    1、servlet规范来自于javaee中的一种
    2、作用：
        1)在servlet规范中，指定了[动态资源文件]开发步骤
        2)在servlet规范中，指定了HTTP服务器调用动态资源文件的规则
        3)在servlet规范中，指定了Http服务器管理动态资源文件实例对象(实现servlet的类实例对象)规则
    3、servlet接口实现类
        1、servlet接口来自于servlet规范下的一个接口，这个接口存在于我们当前的http服务器提供的jar包中
        2、Tomcat服务器下lib文件下有一个servlet-api.jar存放了servlet接口
        3、在servlet规范中，在http服务器能调用的动态资源文件必须是一个servlet接口的实现类
            class student{
                //因为没有实现servlet，所以tomcat无权调用这个动态资源文件
            }

            class teacher implements servlet{
                //因为实现servlet，合法的动态资源文件，所以tomcat可以调用这个动态资源文件
            }

二、servlet接口实现类的开发步骤
    1、只有作为接口的实现类才有资格作为动态资源文件
        1、创建一个java类继承与HttpServlet父类(之所以没有直接实现Servlet，是因为这样降低了实现的难度，
        这里面我们最需要的就是service方法
        ，其他方法都对servlet实现类没啥用，所以继承HttpServlet，其他四个方法它已经实现了)，使之成为Servlet接口实现类
        2、重写HttpServlet类中的两个方法，doget,dopost
        3、将servlet接口实现类的信息注册到tomcat服务器
            注册地点：网站--web文件夹--web-inf---web.xml
            将servlet接口实现类的类路径地址交给tomcat
            <servlet>
                <servlet-name>mm
                    声明一个变量存储servlet接口实现类的类路径
                </servlet-name>
                <servlet-calss>
                    声明servlet接口实现类类路径
                </servlet-calss>
            </servlet>
            相当于String mm = "servlet接口实现类的类路径";

            为了降低用户访问servlet实现类的难度，需要设置简短请求名
            <servlet-mapping>
                <servlet-name>mm</servlet-name>
                <url-pattern>/one</url-pattern>  设置简短的请求别名，书写的时候必须以‘/’开头
            </servlet-mapping>

    2、servlet接口由http服务器厂商负责提供

三、servlet对象生命周期
    servlet对象的创建
        执行无参构造器，只会执行一次，单例多线程的
    servlet对象的初始化
        执行init方法，只会执行一次
    servlet对象的服务
        执行service方法
    servlet对象的销毁
        执行destroy方法,服务器停掉的时候调用此方法
    以上生命周期种在servlet接口里已经有了下面的三个
    总结：
        1、servlet是单例多线程的
        2、一个servlet实例只会执行一次无参构造器和init方法，并且是在第一次访问时执行
        3、用户每提交一次对当前servlet的请求时，就会执行一次service方法
        4、一个servlet只会执行一次destroy方法，在应用停止时
        5、由于servlet时单例多线程的，为了保证 其线程的安全性，一般情况下是不会为serlet类定义可修改的成员变量的，因为每个线程
           都可以修改这个成员变量，会出现线程安全问题
        6、默认情况下，servlet在web容器启动时是不会被实例化的

    1、网站中所有的servlet接口实现类的实例对象，只能由http服务器负责创建，开发人员不能手动创建
    2、在默认情况下，当HTTP服务器接收到对于当前servlet接口实现类第一次请求时自动创建这个servlet实现类的实例对象
        在手动配置情况下，要求HTTP服务器在启动时自动创建某个servlet接口实现类的实例对象，可以针对此servlet做以下配置
        <servlet>
            <servlet-name>mm
                mm
            </servlet-name>
            <servlet-calss>
                com.xx.xx.classs
            </servlet-calss>
            <load-on-startup></load-on-startup>  填写大于0的整数就会在服务器启动时自动创建servlet实现类对象
        </servlet>

    3、在HTTP服务器运行期间，一个servlet接口实现类只能被创建出一个实例对象
    4、在HTTP服务器关闭的时候，自动将网站中所有的servlet实现类对象进行销毁

获取servletConfig对象
    一个servletConfig对应一个servlet
    在web.xml配置文件中的直接体现就是<servlet>
                                    <servlet-name>mmmm</servlet-name>
                                    <servlet-calss>
                                        com.xx.xx.classs
                                    </servlet-calss>
                                    <init-param>
                                        <param-name>namespace</param-name>
                                        <param-value>sd</param-value>
                                    </init-param>
                                    <init-param>
                                        <param-name>namespace2</param-name>
                                        <param-value>sdfw</param-value>
                                    </init-param>
                                    <load-on-startup></load-on-startup>  填写大于0的整数就会在服务器启动时自动创建servlet实现类对象
                                </servlet>
    由于servletConfig中可以获取到servlet的初始化参数，获取到servletContext对象，而这些参数和对象在进行业务逻辑处理时，
    即执行service方法时需要经常使用，很重要，所以servletConfig对象也就显得很重要了。
    由于servletConfig对象是web容器通过init方法传递给当前servlet类的，而init方法只会在servlet对象初始化时调用一次。所以，
    需要在init方法中将servletConfig对象传递给servlet类中的servletConfig的成员变量，这样service方法就可以使用servletConfig
    对象了，也就是说，我们需要在servlet中声明一个servletConfig成员变量；
    若servlet中声明一个servletConfig成员变量是否会存在线程安全问题？因为servlet是单例多线程的。只要在servlet中没有为servletConfig
    提供对外开放的其他修改方法，其值只会在servlet初始化时赋值一次，所以不存在线程安全问题

    servletConfig里的方法
        String getServletName()：获取<servlet-name>mmmm</servlet-name>

        ServletContext getServletContext()：获取ServletContext对象

        String getInitParameter(String var1)：
                <init-param>
                   <param-name>namespace2</param-name>
                   <param-value>sdfw</param-value>
                </init-param>
                根据<param-name>来获取值

        Enumeration<String> getInitParameterNames();
                <init-param>
                    <param-name>namespace</param-name>
                    <param-value>sd</param-value>
                </init-param>
                <init-param>
                    <param-name>namespace2</param-name>
                    <param-value>sdfw</param-value>
                </init-param>
                遍历查找所有的<param-name>

servletContext
    介绍
        servlet上下文也就是servlet环境，所有servlete共享一个环境，一个应用对应一个servletContext;
    servletContext常用方法
        String getInitParameter(String var1)：
            servlet都可以共享的初始化参数
            <context-param>
                <param-name></param-name>
                <param-value></param-value>
            </context-param>
            获取 <param-name>对应的值

        Enumeration<String> getInitParameterNames();
            <context-param>
                <param-name></param-name>
                <param-value></param-value>
            </context-param>
            获取所有的<param-name>

servlet_urlPattern设置模式
    1、精确路径模式
        请求路径必须与<url-pattern>的值 完全相同才可被当前servlet处理
    2、通配符路径模式
        该模式中的路径由两部分组成：精确路径部分和通配符部分；请求路径中只有携带了<url-pattern>值中指定的精确路径部分才可被
        当前servlet处理
    注意：/* 表示当前servlet可以匹配所有请求，可以拦截所有请求，无论动态资源还是静态资源;
         /  会拦截静态资源请求以及会匹配到/springmvc这样的路径型url，不会匹配到模式为*.jsp这样的后缀型url，
            不会拦截动态资源请求，即不会拦截对于jsp的请求
           1、精确匹配：/pic/a.jsp  直接拦截指定的请求
           2、路径匹配：/pic/*      拦截pic下的所有请求
           3、*.jsp:拦截所有以jsp结尾的请求
           /pic/*.jsp  这样是不可以的，不符合以上三种匹配模式
servlet_urlpattern匹配原则
    1、路径优先于后缀匹配原则
        如果一个请求的路径/xxx/a.do，匹配成功了多个servlet_urlpattern，但是其中一个是*.do,另一个是/xxx/*,此时应该优先匹配/xxx/*
    2、精确路径优先匹配原则
        如果一个请求的路径/xxx/a，匹配成功了多个servlet_urlpattern，但是其中一个是/*,另一个是/xxx,此时应该优先匹配/xxx
    3、最长路径优先匹配原则
         如果一个请求的路径/oa/some/other，匹配成功了多个servlet_urlpattern，但是其中一个是/some/*,另一个是/some/other/*,此时应该优先匹配/some/other/*



四、HttpservletResponse接口
       1、介绍
             1)HttpservletResponse接口来自于servlet规范中，在tomcat的servlet-api.jar
            2）HttpservletResponse接口实现类由HTTP服务器负责提供，我们并不需要知道具体是什么实现类
             3)HttpservletResponse接口负责蒋doget/dopost方法执行结果写入到响应体中交给浏览器
             4)开发人员习惯于将HttpservletResponse接口修饰的对象称为响应对象
        2、主要功能
               1)将执行结果以二进制的形式写入到响应体中
                2)设置响应头中的content-type属性值，从而控制浏览器使用对应的编译器将响应体二进制数据编译为 文字、图片、视频、命令
                通过响应对象获得输出流使用后不需要我们手动关闭，因为这不是我们自己创建的，而是我们和tomcat要的；
               通过响应对象，向tomcat索要输出流；通过输出流，将执行结果以二进制的形式写入到响应体；tomcat将响应体包推给浏览器;
                如果执行结果是int类型时，out.write方法会把int当作ASCLL码，从而导致浏览器上出现的结果是ascll码对应的字符串；
                解决方法：实际开发过程中都是用out.print方法，就当没有write方法，以后都用print方法
               当执行结果是字符串并且字符串是含有html指令来处理的情况，原因：浏览器接收到响应包之后，根据响应头中的content-type
               属性值，来采用对应的浏览器编译器对响应体中的二进制的响应结果进行编译处理；默认情况下，content-type默认值是text；
               此时浏览器将用文本编译器对响应体中的二进制数据进行解析；
               解决方案：一定要在得到输出流之前，通过响应对象对响应头中的content-type属性进行一次重新的赋值，
               用于指定浏览器采用正确的编译器；例：Content-type:text/html;charset=utf-8

              3)设置响应头中的location属性，将一个请求地址赋值给location，从而控制浏览器像指定的服务器发送请求
                通过响应对象，将地址赋值响应头中的location属性
                response.sendRedirect("www.baidu.com");
                浏览器接收到响应包后，发现响应头中存在location属性，自动通过地址栏向location指定网站发送请求；
                sendRedirect方法远程控制浏览器请求行为【请求地址，请求方式，请求参数】
                注意：如果有响应内容就用输出流，如果没有响应内容而只是要重定向，就用response.sendRedirect；

五、HttpservletRequest
        1、介绍
              1)HttpservletRequest接口来自于servlet规范中，在tomcat的servlet-api.jar
              2）HttpservletRequest接口实现类由HTTP服务器负责提供，我们并不需要知道具体是什么实现类
              3)HttpservletRequest接口负责在doget/dopost方法运行时读取http请求协议包中的信息
               4)开发人员习惯将HttpservletRequest接口修饰的对象称为请求对象
        2、作用
              1)可以读取http请求协议中请求行信息
                  URI：资源文件精准定位地址；在请求行中并没有URI信息，实际上是从URL中截取的一个字符串
                     这个字符串格式是 “/网站名/资源文件名”；例如http://localhost:8080/httpservlet/some中URI
                     的部分就是/httpservlet/some
                     URI用于让http服务器对被访问的资源文件进行定位
               2)可以读取保存在http请求协议包中请求头/请求体中的请求参数信息
                问题：以get方式返送中文参数内容，服务端获取的是正常的内容，但是以post方式发送中文参数内容后台出现乱码
                 原因：浏览器以get方式发送请求，请求参数保存在请求头中的，当http请求协议包到达http服务器之后，
                        第一件事就是解码，请求头中的二进制的内容是由tomcat负责解码，tomcat9.0默认使用utf-8解码，可以解释
                        一切国家的文字；
                      浏览器以post方式发送请求，请求参数保存在请求体中的，当http请求协议包到达http服务器之后，第一件事就是解码，
                       请求体中的二进制的内容是由当前请求对象request负责解码，request默认使用iso8859-1解码，此时如果请求参数中有中文，
                       将无法解码只能得到乱码
                 解决方案：在post请求方式下，在读取请求体内的内容之前，应该通知请求对象使用utf-8对请求体中的内容编码，而不是iso8859-1

               3)可以代替浏览器向http服务器申请资源文件的调用
               4)HttpServletRequest中的getServletPath()以及getPathInfo()方法
                    获取请求路径中与web.xml中注册servlet时的<url-pattern/>相匹配的路径信息，其中servletpath指的是
                    <url-pattern/>精确匹配的路径，而pathinfo则是与非精确部分相匹配的路径。例如，<url-pattern/>的值为
                    /xxx/ooo/*,用户提交的请求为http://localhost:8080/httpservlet/xxx/ooo/abc/def,则getServletPath()
                    取到的值为/xxx/ooo,而getPathInfo()则为/abc/def；不过若客户提交的是后缀型的请求，
                    例如http://localhost:8080/httpservlet/xxx/ooo/ccc.do,则getServletPath()的值为/xxx/ooo/ccc.do，
                    而getPathInfo()则为null
                    URI = servletContext + servletPath + servletInfo
六、请求对象和响应对象的生命周期
    1、http服务器接收到浏览器发送的http请求协议包之后，自动为当前的http请求协议包生成一个请求对象和响应对象
    2、在HTTP服务器准备推送http响应协议包之前，负责将本次请求关联的请求对象和响应对象销毁
       请求对象和响应对象生命周期贯穿一次请求的处理过程中

七、欢迎资源文件
    1、前提：
        用户可以记住网站名，但是不会记住网站资源文件名
    2、默认欢迎资源文件：
        用户向http服务器发送请求，针对某一个网站的默认请求时，此时由http服务器自动从当前网站返回的资源文件
    3、tomcat对于默认欢迎资源文件定位规则
        1)规则位置：tomcat安装位置/conf/web.xml
        2) <welcome-file-list>
              <welcome-file>index.html</welcome-file>
              <welcome-file>index.htm</welcome-file>
              <welcome-file>index.jsp</welcome-file>
           </welcome-file-list>

    4、设置自己网站的默认欢迎资源文件规则
        1)设置规则位置：网站/web/web.xml
        2)<welcome-file-list>
            <welcome-file>index.html</welcome-file>   就在webapps路径下
            <welcome-file>index.htm</welcome-file>
            <welcome-file>/one</welcome-file>  //默认资源文件不仅仅可以是静态的也可以是servlet，用别名；servlet作为默认欢迎资源时，开头的斜杠不许抹掉
         </welcome-file-list>

         (http://localhost:8080/  这样访问tomcat时，会默认访问tomcat下的ROOT文件夹下的欢迎页面；（这里是指手动启动tomcat
         而不是基于idea）)

tomcat服务器的首页里面点击Manager App进入能看见所有的应用，账号root 密码582709

八、http状态码
    1、分类
        1)组成  100-599 分为5个大类
        2)1xx：
            最有特征 100：通知浏览器本次返回的资源文件并不是一个独立的资源文件，
            需要浏览器在接收响应包之后，继续向http服务器索要依赖的其他资源文件
        3)2xx:
            最有特征200：通知浏览器本次返回的资源文件是一个独立的资源文件，
                     需要浏览器在接收响应包之后，不需要向http服务器索要其他的关联资源文件
        4)3xx:
            最有特征302：通知浏览器本次返回的不是一个资源文件的内容，而是一个资源文件的地址，需要浏览器根据这个地址自动发起
            请求来索要这个资源文件
                response.sendRedirect("资源文件地址");//将地址写入到location属性中，从而导致tomcat将302状态码写入到状态行
          4xx：
            404：通知浏览器，由于在服务器中没有定位到资源文件，因此无法提供相关帮助
            405：通知浏览器，在服务端已经定位到被访问的资源文件(能够出现405状态码，那么被访问的文件必须是个servlet)，
            但是这个servlet对于浏览器采用的请求方式不能处理
          5xx:
            500:通知浏览器，在服务端已经定位到被访问的资源文件(能够出现500状态码，那么被访问的文件必须是个servlet)，
            这个servlet可以接收浏览器的请求方式，但是这个servlet在处理这个请求期间java异常导致处理失败

九、多个servlet之间调用规则
    1)重定向解决方案
        response.sendRedirect   请求方式肯定是get方式
        请求地址：既可以把当前网站内部资源文件地址发送给浏览器，也可以把其他网站的资源文件发送给浏览器
        缺点：重定向解决方案需要在浏览器和服务器之间进行多次往返，大量时间消耗在往返次数上，增加用户等待时间
    2)请求转发解决方案
        1)原理：通过当前请求对象代替浏览器向Tomcat发送请求，申请调用下一个servlet
        2)实现命令：
        //通过当前请求对象生成资源文件申请报告对象
        RequestDispatcher requestDispatcher = request.getRequestDispatcher("/资源文件名");不要写网站名//一定要以“/”开头
        //将报告对象发送给tomcat
        requestDispatcher.forward(request,response);

        forward与include的区别主要是标准输出流的开启时间,forward时原servlet里的response和转发后的servlet里的response是同一个对象；
                但是include转发时，转发之后进入的servlet里的response和之前的servlet里的response不是同一个对象
        forward：说明当前的请求还未结束，需要继续向前，所以服务器就不会在这里先打开标准输出流，所以在forward之前往输出流
                里写的数据是不会写入到浏览器的；
        include:此时已经打开了输出流，但是它也将转发后的servlet里的响应数据也写到了转发前的servlet里的响应流里

        3)优点：servlet之间的调用都是发生在服务端的计算机上，节省服务端与浏览器之间的往返次数
          请求地址：只能向tomcat服务器申请调用当前网站下的资源文件地址
          请求方式：与浏览器发送的请求方式一致

十、多个servlet之间数据共享实现方案
    1、数据共享：oneservlet工作完毕后，将产生的数据交给twoservlet来使用
    2、servlet规范中提供了四种数据共享方案
        1、servletContext接口

        2、Cookie类

        3、HttpSeesion接口

        4、HttpServletRequest接口

十一、servletContext接口
    1、介绍
        1)来自servlet规范中的一个接口，在tomcat中存在servlet-api.jar
            在tomcat中负责提供这个接口的实现类
            一个应用程序只有一个servletContext

        2)如果多个servlet来自于同一个网站，那彼此之间可以通过servletContext实例对象实现数据共享
        3)开发人员习惯于将servletContext对象称为全局作用域对象

    2)工作原理
        每一个网站都存在一个全局作用域对象，相当于一个map

    3)全局作用域对象生命周期
        1)在HTTP服务器启动过程中会自动的为这个网站在内存中创建一个全局作用域对象
        2)在http服务器运行期间时，一个网站只有一个全局作用域对象
        3)在HTTP服务器运行期间，全局作用域一直处于存活状态
        4)在HTTP服务器准备关闭时，负责将当前网站中的全局作用域对象进行销毁处理

十二、cookie
    cookie 是servlet规范中的一个工具类，存在于servlet-api. jar包中
    如果两个servlet 来自于同一个网站并且为同一个浏览器/用户服务借助于cookie对象进行数据共享
    cookie存放当前用户的私人数据，在共享数据过程中提高服务质量
    cookie只存放在请求头中，以及响应头中，cookie相当于一个map，一个cookie中只能存放一个键值对，key和value必须是string，
    key不能是中文
    cookie销毁时机：
        1、默认情况下，cookie对象只要浏览器关闭，就会销毁
    - 2、在手动设置情况下，可以要求浏览器将收到的cookie存放在客户端的计算机硬盘上，同时指定在硬盘上的存活时间，在存活时间内，
    关闭浏览器，客户端计算机以及服务器都不会导致cookie销毁，在存活时间到达时，cookie自动从从硬盘上被销毁



十三、HttpSession接口
    - 1、介绍
    - servlet规范下的一个接口，实现类由http服务器提供，tomcat提供实现类
    - 如果两个servlet 来自于同一个网站并且为同一个浏览器/用户服务借助于httpsession对象进行数据共享
    - 习惯称为会话作用域对象，某一个用户和一个网站之间的完整交流
    session和cookie区别
    存储位置
    cookie 存放在浏览器或者客户端计算机硬盘，session存放在服务器内存

    数据类型
    - cookie只能存放字符串类型，session 可以存储任意类型
    - tomcat在创建session时自动为其创建一个ID，然后存放到cookie 中
    - getSession()
    - 有就返回，没有就造一个返回
    - 和getSession(false)
    有就返回 没有就返回Null
- 十四、servlet规范扩展---------监听器
1、介绍
- 一组来自servlet规范下的接口，共有八个接口，在tomcat 的servlet-api.jar
- 监听器接口需要开发人员亲自实现，http服务器提供jar包并没有对应的实现类
- 监听器用于监控 ‘作用域对象生命周期变化时’ 以及  ‘作用域对象共享数据变化时’
- 2，作用域对象
- 在servlet 规范下，认为在服务端内存中可以在某些条件下为两个servlet之间提供数据共享得对象，被称为作用域对象
- servlet规范下作用域对象
    - Servlet Context  全局作用域对象
    - HttpSession   会话作用域对象
    - HttpServletRequest  请求作用域对象
    3、监听器接口实现类开发规范
          1、根据监听的实际情况，选择对应的监听器接口进行实现
          2、重写监听器接口声明（监听事件处理方法）
          3、在web.xml文件种将监听器注册到http服务器tomcat
    4、ServletContextListener接口
     1）作用
            通过这个接口合法的检测全局作用域对象被销毁时刻以及被初始化时刻
   监听事件处理方法
       contextInitlized()  在全局作用域对象被http服务器初始化时被调用
        contextDestroy()  在全局作用域对象被http服务器销毁时候触发调用
    5、ServletContextAttributeListener接口
        1)作用：通过这个接口合法的检测全局作用域对象共享数据变化时刻
        void attributeAdded(ServletContextAttributeEvent var1);在全局作用于对象添加共享数据

        void attributeRemoved(ServletContextAttributeEvent var1);在全局作用于对象删除共享数据

        void attributeReplaced(ServletContextAttributeEvent var1);在全局作用于对象添加更新数据

    6、httpsessionListener监听器接口
    7、httpsessionAttributeListener接口
    8、ServletRequestListener监听器接口
    9、ServletRequestAttributeListener监听器接口

    HttpSessionBindingListener接口是不要注册的,由类实现它：对象放入session域或者从session域里删除时会触发它
    HttpSessionActivationListener接口是不要注册的,由类实现它；(服务器停掉时将session中的对象序列化到硬盘前会触发钝化事件，
                                                           服务器启动时将对象反序列化到session中会触发活化事件)
                                                          钝化是指及那个内存中的数据写入到硬盘中，而活化则相反；

十五、servlet规范扩展----------过滤器接口
    1、介绍
        1)一个来自servlet规范下的接口，在tomcat 的servlet-api. jar
        2)Filter接口实现类由开发人员负责提供，HTTP服务器不负责提供
        3)Filter接口在HTTP服务器调用资源文件(动态资源文件以及静态资源文件)之前，对HTTP服务器进行拦截
    2、具体作用
        1)拦截HTTP服务器，帮助HTTP服务器检测当前请求的合法性
        2)拦截HTTP服务器，对当前请求进行增强操作
    3、Fileter接口实现类开发步骤
        1)创建一个Java类实现Filter接口
        2)重写Filter中的doFilter方法，在到达servlet或静态资源之前可能由很多过滤器，那么就要把所有doFilter方法走完才能
        到达servlet的doget
        dopost方法或静态资源
        3)在web.xml文件中将过滤器的接口实现类注册到HTTP服务器
    4、生命周期
        实例化---初始化---diFilter---销毁，生命周期过程中，均由web服务器负责管理
        Filter是在应用启动时被创建和初始化的，Filter是单例多线程的，服务器停止的时候就会被销毁
          void init(FilterConfig var1)
         初始化方法里的FilterConfig类似于ServletConfig
         <filter>
                 <filter-name>sjd</filter-name>
                 <filter-class>com.sjd.controller.MyFileter</filter-class>
                 <init-param>
                     <param-name>name</param-name>
                     <param-value>sjd</param-value>
                 </init-param>
                 <init-param>
                     <param-name>age</param-name>
                     <param-value>12</param-value>
                 </init-param>
             </filter>

             <filter-mapping>
                 <filter-name>sjd</filter-name>
                 <url-pattern>/*</url-pattern>

                    注意：这里和servlet不同
                            /* 表示可以匹配所有请求，可以拦截所有请求，无论动态资源还是静态资源;
                            /  不拦截请求，没有效果

                 //可以不指定url-pattern，但需要指定<servlet-name>，即当前拦截器只拦截对指定的servlet的请求
                 <servlet-name>oneservlet</servlet-name>

                 //FORWARD:表示当前过滤器只会拦截有一个Servlet通过RequestDispatcher的forward完成的跳转
                 //INCLUDE:表示当前过滤器只会拦截有一个Servlet通过RequestDispatcher的include完成的跳转
                 //ERROR:表示当跳转到指定错误页面时，这个跳转请求会被当前过滤器拦截
                 //FORWARD:表示当前过滤器会拦截普通请求，但对于forward以及include的跳转不进行拦截，默认值

                 <dispatcher>FORWARD</dispatcher>
             </filter-mapping>
                默认情况下，请求转发时是不会被拦截器拦截的；

        过滤器对编码的校正只对get请求方式有效

        请求和响应都会经过过滤器
一般情况下，一次请求只会经过过滤器来回一次，但是由于不同的容器版本等原因，其实不一定是只经过一次，所以为了解决这个问题，
spring为我们封装了一个类OncePerRequestFilter，这个类帮我们解决了这个问题，我们只需要实现了里面的doFilterInternal方法即可；
一般情况下我们自定义的过滤器最好继承这个类以实现一次请求只会经过过滤器来回一次的目的；
            SomeServiceWapper装饰者父类

        ISomeService iSomeService = new SomeService();//iSomeService：要增强的目标类对象
        ISomeService iSomeService2 = new TrimDecorator(iSomeService);//TrimDecorator：对需要增强的目标类如何增强的实现类
        String s = iSomeService2.doSome();
        System.out.println(s);

Servlet是单例的
servlet中有个方法getservletinfo，这个方法一般可以在里面返回一些说明性文字，譬如版本，作者
ServletConfig类可以看做是web. xml中的一个servlet的类，见下，当访问一个servlet时，会将访问的这个servlet抽象成一个对象，
这个类里面有几个方法，其中getinitParaName返回的是servlet配置文件web. xml中init-param里面的值
一个servlet肯定是对应一个servletConfig
<servlet>
        <servlet-name>MyServlet</servlet-name>
        <servlet-class>com.sjd.controller.MyServlet</servlet-class>
        <init-param>
            <param-name>namespace</param-name>
            <param-value>sd</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

GenericServlet这个抽象类里面的init方法为什么会有一个重载
这个重载是为了当servlet初始化时，我们开发人员可以做一些操作

servlet3.0三大组件使用注解，而不用在web. xml中进行注册
    servlet3.0是没有web. xml文件的，该规范允许了在定义servlet. FIlter. LIstener，方法都是在相应的组件上使
    用注解@webservlet.  @webFIlter  @webListener

注册servlet
    1、若对于servlet 采用了两种方式同时进行注册，则需要注意
     1、若两方式的url-pattern值相同，则应用无法启动
   2、若两种方式的url-pattern值不同，那么相当于该servlet具有两个url-pattern值
  若对filter进行两种方式进行注册
无论url-pattern的值是否相同，其都作为两个独立Filter进行注册

若对listener进行两种方式进行注册，其都作为一个独立listener进行注册

web. xml文件中有一个<web-app>注解，属性metadata-complete值若为true，则表示三大组件的注册方式，只有web. xml中的注册起作用，
讲忽略注解的注册 若为false，则表示两种方式都起作用，值默认为false


servlet3.0以上版本为文件上传专门提供了API，httpServletRequest的getPart方法可以完成单个文件得上传，
而getParts方法可以完成多个文件的上传，方法参数name是表单中file属性的name值

servlet异步处理
    1、为什么要使用异步处理
        servlet是单例多线程的，服务器会为每一个servlet创建一个线程池，如果线程池里的线程用完了，那下面的对该servlet的请求
        就只能等着了

     //获取异步上下文对象
    AsyncContext asyncContext = req.startAsync();
    Thread thread = new Thread(new ComputeThred(asyncContext));
    //设置异步上下文对象的超时时间
    //asyncContext.setTimeout(3000);
    //开启异步上下文对象
    asyncContext.start(thread);

class ComputeThred implements Runnable{
    private AsyncContext asyncContext;
    public ComputeThred(AsyncContext asyncContext) {
        this.asyncContext = asyncContext;
    }
    @Override
    public void run() {
        try {
            HttpServletRequest request = (HttpServletRequest) asyncContext.getRequest();
            HttpSession session = request.getSession();
            session.setAttribute("sum",sum);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
虽然是servlet异步，但是用的还是一个输出流，所以servlet还是阻塞的；所以我们一般是将主线程的结果先返回，然后将异步线程里的数据放到
session或者SetvletConteext里面，然后再另一个页面里去获取这个结果


组件的可插性
    所谓组件的可插性是指，支持将打成jar包的servlet、filter、listener直接插入到正在运行的web项目中
    三个组件的操作是一样的

servlet3.0的三大组件的动态注册
    servlet
        步骤：实现servletContextListener接口，在这个初始化方法里添加servlet
        @WebListener
        public class MyServletCintextListener implements ServletContextListener {
            @Override
            public void contextInitialized(ServletContextEvent servletContextEvent) {
                String servletName = "someServlet";
                String className = "com.sjd.controller.MyServlet";
                ServletRegistration.Dynamic dynamic = servletContextEvent.getServletContext().addServlet(servletName, className);
                dynamic.addMapping("/some2");
                System.out.println("动态注册servlet222");
            }

            @Override
            public void contextDestroyed(ServletContextEvent servletContextEvent) {

            }
        }

filter以及listener动态添加的步骤类似吗、，都是用ServletContextListener


servlet的线程安全问题
    因为servlet时单例多线程的，所以有可能出现线程安全问题，为了避免此类问题的发生，对于servlet的使用，
    一般不声明成员变量，若必须声明成员变量，那么只能通过线程同步机制syncronized来避免。


ServletContainerInitializer
    1、概述
        ServletContainerInitializer 是 Servlet 3.0 新增的一个接口，主要用于在容器启动阶段通过编程风格注册Filter,
        Servlet以及Listener，以取代通过web.xml配置注册。这样就利于开发内聚的web应用框架.
    2、使用
        1、Servlet容器启动会扫描，当前应用里面每一个jar包的ServletContainerInitializer的实现
        2、提供ServletContainerInitializer的实现类；
            必须绑定在，META-INF/services/javax.servlet.ServletContainerInitializer
            文件的内容就是ServletContainerInitializer实现类的全类名
        3、我们可以给ServletContainerInitializer 的实现类添加 @HandlesTypes 注解
        ⑥，在其onStartup 方法上便可以得到我们感兴趣的类
        总结：容器在启动应用的时候，会扫描当前应用每一个jar包里面
        META-INF/services/javax.servlet.ServletContainerInitializer
        指定的实现类，启动并运行这个实现类的方法；传入感兴趣的类型；

        //这里指定的类型以及子类型、接口等都会被传递到onStartup方法中的set中
        @HandlesTypes(MyServlet.class)
        public class MyServletContainerInitializer implements ServletContainerInitializer {
            @Override
            public void onStartup(Set<Class<?>> set, ServletContext servletContext) throws ServletException {
                ServletRegistration.Dynamic myServlet = servletContext.addServlet("myServlet", MyServlet.class);
                myServlet.addMapping("/myServlet");
            }
        }

servlet3.0容器和springmvc整合
    1、spring-web jar包；里有一个 META-INF/services/javax.servlet.ServletContainerInitializer
        web容器启动的时候会扫描每个jar包下的这个文件夹的文件
    2、加载文件中指定的类SpringServletContainerInitializer
    3、spring的应用一启动就会加载感兴趣的这个WebApplicationInitializer接口下的所有类型的组件，
        并且为这些组件创建对象（非接口和抽象类）
        这个接口下的子类型
        1、AbstractContextLoaderInitializer
            1、创建根容器
            WebApplicationContext rootAppContext = createRootApplicationContext();
            2、将rootAppContext放到ContextLoaderListener中
            3、然后将ContextLoaderListener注册到servlet容器中，等待servlet容器创建完毕后，触发ContextLoaderListener

        2、AbstractDispatcherServletInitializer
            1、注册DispatcherServlet
                1、创建web的ioc容器，createServletApplicationContext();
                2、创建一个DispatcherServlet
                3、将DispatcherServlet添加到servletContext中

        3、AbstractAnnotationConfigDispatcherServletInitializer注解方式的初始化器
            创建根容器
    总结
        如果要以注解方式启动springmvc，需要继承AbstractAnnotationConfigDispatcherServletInitializer
        public class MyAnnotationConfigDispatcherServletInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {
            //获取根容器的配置类(类似与spring的配置文件)，利用servletContext的监听器读取配置，形成父容器
            //这个容器主要是扫描services、repositories这些需要在多个servlet之间共享的bean
            @Override
            protected Class<?>[] getRootConfigClasses() {
                return new Class[]{RootConfig.class};
            }

            //获取web容器的配置类(相当于springmvc配置文件)，子容器
            //这个容器主要是扫描controller、viewResolver、handlerMapping等一些和web相关的bean
            @Override
            protected Class<?>[] getServletConfigClasses() {
                return new Class[]{AppConfig.class};
            }

            //获取dispatchservlet的映射信息
            @Override
            protected String[] getServletMappings() {
                //  /:拦截所有请求，包括静态资源，但是不包括*.jsp
                //  /*:拦截所有请求，也包括*.jsp
                return new String[]{"/"};
            }
        }


        springboot向容器注册dispatchservlet的方式和springmvc注解版的不一样,springboot
        是使用DispatcherServletAutoConfiguration仔顶配置类注册的